# Functions for use in terminal


# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# ------------------------------------------------

# Make find easier to use
myfind() {
    find ./ -iname "*$2*" -type "$1" | tee ${TMPDIR}/my_ffound | cat -n
    FFOUND_PWD=${PWD}
    FFOUND=($(cat ${TMPDIR}/my_ffound))
}

# And even simpler, for files and directories
ff() { myfind "f" "$1"; }
fd() { myfind "d" "$1"; }

# Extract filename from find list
fn() {
    [ ! -z ${FFOUND[$1-1]} ] && echo ${FFOUND_PWD}/${FFOUND[$1-1]};
}

fo() {
  open $(fn "$1")
}

# Open file from find list in vim, or change to the directory
v() { vim $(fn "$1");  }
ch() { cd $(dirname $(fn "$1")); }

# Re-list previous finds
lf() { echo ${FFOUND[*]} | tr -s ' ' '\n' | cat -n; }

# Easily jump back to Vim with CtrlZ
fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER="fg"
        zle accept-line
    else
        zle push-input
        zle clear-screen
    fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z


# Use cat or less, depending on linecount
catless() {
    height=$(tput lines)
    fileheight=$(wc -l $1 | awk '{print $1}')
    if [[ $height -gt $fileheight ]]
    then
        cat $1
    else
        less $1
    fi
}

mans () {
    man $1 | grep -iC2 --color=always $2 | less
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

mktar () {
    tar -cvf "$1".tar.gz "${@:2}"
}

prevtar () {
    tar -ztvf "$1"
}

remspace () {
    rename 's/\s+/_/g' "$1"
}

ii() {
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Current network location :$NC " ; scselect
    echo -e "\n${RED}Public facing IP Address :$NC " ;myip
    #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
    echo
}

mdpreview() {
    pandoc -s -c ~/.dotfiles/simple-pandoc-css.css --mathjax $1 > ~/.mdpreview.html && open ~/.mdpreview.html
}

mdpreviewself() {
    pandoc -s -c ~/.dotfiles/simple-pandoc-css.css --self-contained --mathjax $1 > ~/.mdpreview.html && open ~/.mdpreview.html
}

mdtohtml() {
    fn=.$(extractFilenameNoExt $1).html
    [ -e $fn ] && rm $fn
    pandoc -s -c ~/.dotfiles/github-markdown.css --self-contained --mathjax $1 > $fn
}

# Remove shitty DS_store files
alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

alias todo="vim ~/Dropbox/notes/todo.md"

extractFilenameNoExt () {
    filename=$(basename "$1")
    file_no_ext="${filename%.*}"
    echo $file_no_ext
}


ht () {
  if [ $# -lt 1 ]
    then
    echo "Usage: ht FILE [DELIMITER=' ']"
    return -1
  fi
  if [ $# -eq 1 ]
    then delim=' '
  fi
  if [ $# -ge 2 ]
    then delim=$2
  fi
  awk -F $delim 'NR == 2 { printf $1; exit }' $1 && echo -n " till "
  tail -n 1 $1 | awk -F $delim '{ print $1 }'
  #    head -n 2 $1 && tail -n 1 $1
}

epoch2date () {
  epc=$1
  fmt='+%Y%m%d %H:%M:%S'
  date -r $epc $fmt
}

today () {
    date +"%Y-%m-%d"
}

logbook_today () {
  cur=`pwd`
  date=`today`
  fn=`today`.md
  logbook_dir='/Users/davison/engd-notes/logbook2016/'
  cd $logbook_dir
  touch `today`.md
  echo '...replace...' >> $fn
  cd $cur
}

dir_today () {
    mkdir output_`date +"%Y%m%s"`
}

listfuncs () {
  fn=$1
  ctags $fn
  extension="${fn##*.}"

  if [[ "$extension" == "py" ]]
  then
    awk_cmd='/.*\^def/ { gsub(/.*\^def /, ""); gsub(/:\$.*/, ""); print $0 }'
    awk $awk_cmd tags
  fi

  if [[ "$extension" == "rs" ]]
  then
    awk '/^fn/ { gsub(/^fn /, ""); gsub(/{$/, ""); print $0 }' "$fn"
  fi

  rm tags
}

running(){
  ps | tr -s " " | cut -d' ' -f 3- | awk 'NR>1{print}'
}

md2pdf(){
  outfn="$1"
  title="$2"
  pandoc ${@:3:$#} -o $outfn -S --toc --toc-depth=2 -V title=$title -V documentclass=report -V geometry:margin=1in  
}

org2html(){
  pandoc -s -c ~/.dotfiles/simple-pandoc-css.css --toc $1 -o ~/Dropbox/notes/html/$(extractFilenameNoExt $1).html
}

todotoday(){
  todof $TODOFILE 'A'
}

makelogbook(){
  logbookout=~/Dropbox/$(extractFilenameNoExt $LOGBOOK).pdf
  pandoc --template="/Users/davison/.dotfiles/pandoc.latex" -s --toc -o $logbookout $LOGBOOK
}

mygitinit(){
  git init
  touch .gitignore  
  echo ".gitignore" > .gitignore
  touch README.md
  git add README.md
  git commit -m "Initial Commit"
}

mdtidy(){
  pandoc -s --atx-headers -t markdown $1 -o $1
}

mdtidyref(){
  pandoc --reference-links -s --atx-headers -t markdown $1 -o $1
}

todohtml(){
  fn="/Users/davison/Dropbox/notes/todo.md"
  tmpfile="/Users/davison/Dropbox/notes/.todo.md"
  fno="/Users/davison/Dropbox/notes/.todo.html"
  [ -e $tmpfile ] && rm $tmpfile
  [ -e $fno ] && rm $fno
  todohtml.py > $tmpfile
  pandoc -s -c ~/.dotfiles/github-markdown.css --self-contained $tmpfile > $fno
}
