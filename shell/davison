#! /usr/bin/env bash
command=$1
shift

[ "$command" = "" ] && {
    echo "Chris Davison's utilities"
    echo "usage: $(basename $0) command args..."
    echo ""
    echo "Available commands"
    echo ""
    echo "    printbefore"
    echo "    printafter"
    echo "    printbetween"
    echo "    extract"
    echo "    epoch"
    echo "    lastmonday"
    echo "    timenow"
    echo "    nextsunday"
    exit
}

case "$command" in
    printbefore) ;;
    printafter) ;;
    printbetween) ;;
    extract) 
        if [ -f $1 ] ; then
            case $1 in
                *.tar.bz2)   tar xjf $1     ;;
                *.tar.gz)    tar xzf $1     ;;
                *.bz2)       bunzip2 $1     ;;
                *.rar)       unrar e $1     ;;
                *.gz)        gunzip $1      ;;
                *.tar)       tar xf $1      ;;
                *.tbz2)      tar xjf $1     ;;
                *.tgz)       tar xzf $1     ;;
                *.zip)       unzip $1       ;;
                *.Z)         uncompress $1  ;;
                *.7z)        7z x $1        ;;
                *)     echo "'$1' cannot be extracted via extract()" ;;
            esac
        else
            echo "'$1' is not a valid file"
        fi ;;
    epoch) date -r $1 +"%Y%m%d %H:%M:%S" ;;
    lastmonday) date -v -monday +"%Y-%m-%d"    ;;
    timenow) date +"%Y-%m-%d %H:%M:%S" ;;
    nextsunday) date -v +sunday -v +7d +%F ;;
    catless)
        height=$(tput lines)
        fileheight=$(wc -l $1 | awk '{print $1}')
        if [[ $height -gt $fileheight ]]
        then
            cat $1
        else
            less $1
        fi ;;
    mans) man $1 | grep -iC2 --color=always $2 | less ;;
    remspace) rename 's/\s+/_/g' "$1" ;;
    filenameNoExt)
        filename=$(basename "$1")
        file_no_ext="${filename%.*}"
        echo $file_no_ext ;;
    running) ps | tr -s " " | cut -d' ' -f 3- | awk 'NR>1{print}' ;;
    uuidrecord) 
        id="$(uuid)"
        echo $id > ~/.lastuuid
        cat ~/.lastuuid ;;
    uuidlast) [ -f ~/.lastuuid ] && cat ~/.lastuuid ;;
    literatureTitle)
        authors="$(slugify "$1")"
        year=$2
        title="$(slugify "$3")"
        ext=$4
        echo "$year--$authors--$title.$ext"
        ;;
    myip)
        ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
        ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
        ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
        ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
        ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
        ;;
    ppath)
        echo $PATH | tr ":" "\n" | \
        awk "{ sub(\"/usr\",   \"$fg_no_bold[green]/usr$reset_color\"); \
             sub(\"/bin\",   \"$fg_no_bold[blue]/bin$reset_color\"); \
             sub(\"/opt\",   \"$fg_no_bold[cyan]/opt$reset_color\"); \
             sub(\"/sbin\",  \"$fg_no_bold[magenta]/sbin$reset_color\"); \
             sub(\"/local\", \"$fg_no_bold[yellow]/local$reset_color\"); \
             print }" ;;
    moveNamedScreenshot)
        if ! [ -d $2 ]; then
            echo "Usage: MoveNamedScreenshot <FILE> <TARGET DIR> <NEW NAME>"
            return -2
        fi
        if ! [ -f $1 ]; then
          echo "Usage: MoveNamedScreenshot <FILE> <TARGET DIR> <NEW NAME>"
          return -1
        fi
        local fn
        fn=$2"/"$3
        echo "../"$(basename $2)"/"$3 | pbcopy
        mv $1 $fn
        ;;
    noteadd|na)
        if [ -e "$EXTERNAL_BRAIN" ]; then
            echo "$(date +'%Y%m%d') $1" >> "$EXTERNAL_BRAIN"
        else
            echo "$(date +'%Y%m%d') $1" > "$EXTERNAL_BRAIN"
        fi ;;
    noteview|nv) 
        if [ -e "$EXTERNAL_BRAIN" ]; then
            cat "$EXTERNAL_BRAIN"
        else
            echo "No notes.  Need to create $EXTERNAL_BRAIN"
        fi ;;
    noteclear|nc) 
        [ -e "$EXTERNAL_BRAIN" ] && rm "$EXTERNAL_BRAIN" && touch "$EXTERNAL_BRAIN" ;;
    notefile) echo "$EXTERNAL_BRAIN" ;;
    headtail|ht)
        if [ $# -lt 1 ]; then
            echo "Usage: ht FILE [DELIMITER=' ']"
            return -1
        fi
        if [ $# -eq 1 ]; then 
            delim=' '
        fi
        if [ $# -ge 2 ]; then 
            delim=$2
        fi
        awk -F $delim 'NR == 2 { printf $1; exit }' $1 && echo -n " till "
        tail -n 1 $1 | awk -F $delim '{ print $1 }'
        ;;
    logbook)
        opt="$1"
        case "$opt" in
            edit|e) echo "editing todays logbook" ;;
            view|v) echo "viewing todays logbook" ;;
            commit|c) echo "commiting todays logbook" ;;
        esac
    ;;
    md|markdown) 
        opt="$1"
        case "$opt" in
            tidy)
                fmt="markdown_github-hard_line_breaks+yaml_metadata_block+tex_math_dollars+line_blocks"
                pandoc -s --atx-headers --normalize -t $fmt --columns=80 --reference-links $1 -o $1 ;;
            tidynoref)
                fmt="markdown_github-hard_line_breaks+yaml_metadata_block+tex_math_dollars+line_blocks"
                pandoc -s --atx-headers --normalize -t $fmt --columns=80 --reference-links $1 -o $1 ;;
            pdf)
                outfn="$1"
                title="$2"
                pandoc ${@:3:$#} -o $outfn -S --toc --toc-depth=2 -V title=$title -V documentclass=report -V geometry:margin=1in ;;
            html)
                fn=.$(extractFilenameNoExt $1).html
                [ -e $fn ] && rm $fn
                pandoc -s -c ~/.dotfiles/github-markdown.css --self-contained --mathjax $1 > $fn ;;
            preview) ;;
        esac
    ;;
esac
exit $?
