quit()
import os
for file in os.listdir("~/.templates"):
    print(file)
os.args
os.Argv
os.Argv()
import sys
sys.args
sys.Argv
sys.argv
exit
quit
quit()
rate = 45000
week = 45000/50
week
week / 40
67 * (365-14)
import numpy as np
np.log(-1)
quit()
import py-deathwatch
import deathwatch
q
exit
quit()
bl = ["abcd", "efgh"]
def changing(l):
  l[0] = "changed"
changing(bl)
bl
quit()
num = 57
int(str(num).reverse())
str(num).reversed()
reverse(str(num))
str(num)[::-1]
int(str(num)[::-1])
int(str(57)[::-1])
quit()
import deathwatch.py
import deathwatch
dos(45,55)
degrees(45,55)
import deathwatch as dw
dw.degrees(45,55)
dw.degrees(46,55)
dw.degrees(55,50)
(50-55)/10
import math as m
m.floor(-0.5)
m.floor(1)
m.floor(0.5)
dw.degrees(45,55)
dw.degrees(55,45)
dw.degrees(55,54)
54-55
math.floor(-1)
m.floor(-1)
dw.degrees(55,54)
m.floor(-1/10)
m.lfoor((54-55) / 10)
m.floor((54-55)/10)
a
m.floor((54-55)/10)
import deathwatch as dw
dw.attack(55,54)
import deathwatch as dw
dw.attack(45,10)
p
dw.attack(45,0)
quit()
stuff = {"a":1, "b":2}
stuff.keys()
stuff.values()
print("{}".format(stuff.keys()))
for key, _ in stuff:
print("{}".format(key), end=", ")
for key, _ in stuff:
  print("{}".format(key), end=", ")
for key, _ in stuff.items():
  print("{}".format(key), end=", ")
ls
quit()
from collections import OrderedDict
s = OrderedDict({'a':0, 'b':1})
s
for k, v in s.items():
  print(k, v)
import modifiers
getSizeModifier()
import modifiers as m
m.getSizeModifier()
import modifiers as m
m.getSizeModifier()
quit()
import modifiers as m
m.getSizeModifier()
import modifiers as m
m.getSizeModifier()
quit()
import modifiers as m
m.getSizeModifier()
enormous
import modifiers as m
m.getSizeModifier()
monumental
d = 5
f = 6
(d/2)/f
d/(2f)
d/(2*f)
d = 3.8
f = 4.25
ls
import math as m
m.atan(d/2/f)
m.sin(_)
0.42 * 180 / m.pi
m.sin(m.atan(d/2/f))
quit()
d = 22
f = 11.7
import math as m
m.atan(d / 2*f)
m.atan(d / (2*f))
m.sin(m.atan(d / (2*f)))
m.atan(d / (2*f))
_ * m.pi / 180
_ * 180 / m.pi
m.atan(11/11.7)
m.degrees(_)
m.sin(m.radians(_))
0.685 + 0.41
quit()
p = 5.2E-6
M = 18.75
p/M
0.27E-6
NAcond = 0.685
NAobj = 0.41
lamb = 400e-9
r = lambda l: (1.22 * l / (NAcond + NAobj)
)
r(lamb)
r(448e-9)
r(390e-9)
r(448e-9)
r(700e-9)
quit()
ls = ["a", "b", "c"]
ls_s = set(ls)
ls_s
for l in ls_s:
  print(l)
for l in sorted(ls_s):
  print(l)
quit()
[] == True
if []:
  print('Not here')
gst
quit()
p = 10000
j = 1.66667E-6
rf = p/j
rf
n = 3.5E-3
L = 1E-2
pi
Pi
import math as m
m.pi
r = 10E-6
R = 8 * n * L / (m.pi * r**4)
R
quit()
months = 7
monthly = 18500 / 12
monthly
short_monthly = monthly - 1155
short_monthly * months
14100 + _
quit
quit()
with open("nums.txt", "w") as f:
i = 0
with open("nums.txt", "w") as f:
  for i in range(100):
    f.write(i)
with open("nums.txt", "w") as f:
  for i in range(100):
    f.write("{}", i)
with open("nums.txt", "w") as f:
  for i in range(100):
    f.write("{}" % i)
with open("nums.txt") as f:
  f.writelines([int(i) for i in range(100)])
quit()
with open("library.bib") as f:
lines = [line for line in f]
lines = [line for line in open("library.bib")]
lines[5]
import re
m = re.match('(.*)\s+=\s+(.*)', lines[5])
m
m = re.match('(\W)\s+=\s+(.*)', lines[5])
m
m = re.match('(\W+)\s+=\s+(.*)', lines[5])
m
m = re.match('([a-zA-Z]+)\s+=\s+(.*)', lines[5])
m
m = re.match('([a-zA-Z]+)\s+=\s+(.*),', lines[5])
m
m = re.match('\s+(.*)\s+=\s+(.*),', lines[5])
m
m = re.match('(.*)\s+=\s+(.*),', lines[5])
m
m.group(0)
m.group(1)
m.group(2)
m.group(3)
m.group(1)
m = re.match('(.*)\s+=\s+(.*),', lines[5])
m.group(1)
lines[5]
m = re.match('(.*?)\s+=\s+(.*?),', lines[5])
m
m = re.match('\s(.*?)\s+=\s+(.*?),', lines[5])
m
quit()
import re
lines = [line for line in open("library.bib")]
lines = lines[5:]
lines[0]
re.match('author\s=\s({.*?})', lines[0])
re.match('author\s+=\s+({.*?})', lines[0])
m = re.match('author\s+=\s+({.*?})', lines[0])
m
m = re.match('author = ({.*?})', lines[0])
m = re.match('author = {.*?}', lines[0])
m
m = re.match('author = ({.*?})', lines[0])
m
m = re.match('@\W+', lines[0])
m
quit()
"{} {}".format(1, 2)
quit()
2.303*298
E = E_0 - (2.303 * R * T * pH) / F
E_0 = 1
E = E_0 - (2.303 * R * T * pH) / F
def E(E_0, pH, T=298):
  R = 8.314472
  F = 9.64853399E4
  return E_0 - (2.303 * R * T * pH) / F
E(1, 1)
R = 8.314472
F = 9.64853399E4
R * 298 * 2.303 / F
-0.06 * 16.17
-0.06 * 16.67
0.77 / 13
quit()
R1=10E3
R2=5.1E3
Ro = (R1 * R2)/(R1 + R2)
Ro
Ri = 3.3k
Ro = lambda x: 16.67 * x
Ro(3.3E3)
Ro(1.2E3)
Ro(2.2E3)
Ro(3.3E3)
Ri = lambda x: x / 16.67
Ri(47)
Ri(68)
Ri(47)
Ri(33)
Ri(22)
Ro(1.25)
20 / 1.25
16 * 0.06
30 / 150
5 / (50E-9)
print("{:.10f}".format(_))
print("{:.10e}".format(_))
print("{:.3e}".format(_))
print("{:.3s}".format(_))
print(_.to_eng_string())
import decimal
from decimal import *
print((Decimal(5 / 50E-9).to_eng_string())
print(Decimal(5 / 50E-9).to_eng_string())
print(Decimal(5 / 50E-9).normalise().to_eng_string())
print(Decimal(5 / 50E-9).normalize().to_eng_string())
print(Decimal(0.003))
print(Decimal(0.003).normalize())
print(Decimal(0.003).normalize().to_eng_string())
print(Decimal(0.003).to_eng_string())
quit()
import eng-notation
quit()
import eng_notation
from eng_notation import *
eng(5 / 50E-9)
eng(5 / (50E-9))
eng(5 / 50E-9)
quit()
import time
time.time()
time.localtime()
time.localtime()['tm_mon']
time.localtime()
start = time.struct_time(tm_year=2014, tm_mon=10, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0)
start = time.mk_time(tm_year=2014, tm_mon=10, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0)
start = time.mktime(tm_year=2014, tm_mon=10, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0)
time.strptime("01/10/2014", "%d%m%y)
time.strptime("01/10/2014", "%d%m%y")
time.strptime("01/10/2014", "%d/%m/%y")
time.strptime("01/10/2014", "%dd/%mm/%yy")
time.strptime("01/10/2014", "%D/%M/%Y")
time.strptime("01/10/2014", "%d/%m/%Y")
start = _
start
now = time.local_time()
now = time.localtime()
now
now - start
ls
quit()
which python
quit0
quit()
