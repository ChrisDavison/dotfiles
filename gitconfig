[user]
  name = Chris Davison
  email = c.jr.davison@gmail.com
[alias]
	co = checkout
[color "branch"]
  current = yellow bold
  local = green bold
  remote = cyan bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold

[alias]
    sync = "!git co master && git pb"

	a = add --all
 
	b = branch
	ba = branch -a
	bd = branch -d
	br = branch -r
    bdm = "!git branch --merged | grep -v '*' | xargs -n 1 git branch -d"

	c = commit
	ca = commit -a
	cm = commit -m
	cam = commit -am
	amend = commit --amend
    aamend = commit -a --amend

    co = checkout
    cob = checkout -b

	d = diff -w
    dp = diff --word-diff
	dc = diff -w --cached
    ignored = ls-files --others

	l = log --oneline
    lg = log --stat --decorate
    plg = log --graph --author=c.jr.davison@gmail.com --pretty='format:%C(yellow)%h %C(blue)%s%C(reset) %C(red)%d%C(reset)' 
    plgd = log --graph --author=c.jr.davison@gmail.com --pretty='format:%C(yellow)%h %C(green)%ar%C(reset) %C(blue)%s%C(reset) %C(red)%d%C(reset)' 
    plgall = log --graph --pretty='format:%C(yellow)%h %C(blue)%s%C(reset) %C(red)%d%C(reset)' 
    plgdall = log --graph  --pretty='format:%C(yellow)%h %C(green)%ar%C(reset) %C(blue)%s%C(reset) %C(red)%d%C(reset)' 

	ls = ls-files

    mff = merge
	m = merge --no-ff

    pr = prune -v

	ps = push
	pl = pull
	pb = pull --rebase --prune

    rb = rebase
    rbc = rebase --continue

    undo = reset HEAD~1 --mixed

    s = status -s
    st = status -s
	sb = status -s -b
    stb = status -s -b

	sa = stash apply
	sc = stash clear
	sd = stash drop
	sl = stash list
	sp = stash pop
	ss = stash save
	sw = stash show

    # Don't reset --hard HEAD (incase there was a good bit of code
    # amongst the crap)
    # instead, save an unreachable commit.
    # Can later be applied via searching `git reflog`
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT $(date)' && git reset HEAD~1 --hard
    
    # Ask git to either not follow, or follow, tracked files
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    unpushed = log --branches --not --remotes

    # Checkout either local (ours) or remote (theirs) version of files
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

    la = "!git config -l | grep alias | cut -c 7-"

    branch-name = "!git rev-parse --abbrev-ref HEAD"

    # Push the current branch to origin/<branch>
    publish = "!git push -u origin $(git branch-name)"
    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

[push]
	default = simple
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	prompt = false
