!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
//	.config/nvim/init.vim	/^vnoremap \/\/ y\/<c-r>"<CR>$/;"	m
<	.config/nvim/init.vim	/^vnoremap <      <gv$/;"	m
<BS>	.config/nvim/init.vim	/^nnoremap <BS>   <C-^>$/;"	m
<C-n>	.config/nvim/init.vim	/^nnoremap <C-n> :NERDTreeToggle<CR>$/;"	m
<CR>	.config/nvim/init.vim	/^nnoremap <silent> <CR> :nohlsearch<CR>$/;"	m
<S-TAB>	.config/nvim/init.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	.config/nvim/init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-c>	.config/nvim/init.vim	/^inoremap <c-c> <ESC>$/;"	m
<c-space>	.config/nvim/init.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	.config/nvim/init.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>b	.config/nvim/init.vim	/^    nnoremap <leader>b :Buffers<CR>$/;"	m
<leader>b	.config/nvim/init.vim	/^    nnoremap <leader>b :ls<Cr>:b$/;"	m
<leader>en	.config/nvim/init.vim	/^    nnoremap <leader>en :Files ~\/src\/github.com\/chrisdavison\/knowledge<CR>$/;"	m
<leader>en	.config/nvim/init.vim	/^    nnoremap <leader>en :edit ~\/src\/github.com\/chrisdavison\/knowledge\/**\/*$/;"	m
<leader>es	.config/nvim/init.vim	/^    nnoremap <leader>es :Files ~\/src\/github.com\/chrisdavison\/scripts<CR>$/;"	m
<leader>es	.config/nvim/init.vim	/^    nnoremap <leader>es :edit ~\/src\/github.com\/chrisdavison\/scripts\/**\/*$/;"	m
<leader>ev	.config/nvim/init.vim	/^    nnoremap <leader>ev :edit ~\/.config\/nvim\/init.vim<CR>$/;"	m
<leader>ev	.config/nvim/init.vim	/^    nnoremap <leader>ev :edit ~\/.vimrc<CR>$/;"	m
<leader>g	.config/nvim/init.vim	/^nnoremap <leader>g :silent! lgrep! ""<LEFT>$/;"	m
<leader>j	.config/nvim/init.vim	/^map <leader>j <Plug>(easymotion-j)$/;"	m
<leader>k	.config/nvim/init.vim	/^map <leader>k <Plug>(easymotion-k)$/;"	m
<leader>md	.config/nvim/init.vim	/^nnoremap <leader>md :MarkDrawer<CR>$/;"	m
<leader>n	.config/nvim/init.vim	/^    nnoremap <leader>n :Files ~\/Dropbox\/notes\/<CR>$/;"	m
<leader>n	.config/nvim/init.vim	/^    nnoremap <leader>n :edit ~\/Dropbox\/notes\/**\/*$/;"	m
<leader>p	.config/nvim/init.vim	/^    nnoremap <leader>p :Files<CR>$/;"	m
<leader>p	.config/nvim/init.vim	/^    nnoremap <leader>p :find$/;"	m
<leader>rn	.config/nvim/init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>s	.config/nvim/init.vim	/^    nnoremap <leader>s  :ls<CR>:filt  ls<LEFT><LEFT><LEFT>$/;"	m
<leader>s	.config/nvim/init.vim	/^nnoremap <leader>s  :Scratch<CR>$/;"	m
<leader>t	.config/nvim/init.vim	/^nnoremap <leader>t :TagbarToggle<CR>$/;"	m
>	.config/nvim/init.vim	/^vnoremap >      >gv$/;"	m
Bd	.config/nvim/init.vim	/^command! Bd bp|bd #$/;"	c
CD	.config/nvim/init.vim	/^command! CD exec "cd ".expand("%:h")$/;"	c
CopyFilename	.config/nvim/init.vim	/^command! CopyFilename exec "@+=expand(\\"%\\")"$/;"	c
CopyRelativeFilename	.config/nvim/init.vim	/^command! CopyRelativeFilename exec "@+=expand(\\"%:p\\")"$/;"	c
E	.config/nvim/init.vim	/^cnoreabbrev E e$/;"	m
FMT	.config/nvim/init.vim	/^command! FMT exec "silent!normal mzgg=G`zmzzz"$/;"	c
FindWord	.config/nvim/init.vim	/^command! FindWord exec "Rg " . expand("<cword>")$/;"	c
K	.config/nvim/init.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
K	.config/nvim/init.vim	/^nnoremap K :silent! lgrep! "\\b<C-R><C-W>\\b"<CR>:lw<CR>$/;"	m
MakeNonExDir	.config/nvim/init.vim	/^function! MakeNonExDir()$/;"	f
Q	.config/nvim/init.vim	/^nnoremap <silent> Q =ip$/;"	m
Q!	.config/nvim/init.vim	/^cnoreabbrev Q! q!$/;"	m
Qa	.config/nvim/init.vim	/^cnoreabbrev Qa qa$/;"	m
RMD	.config/nvim/init.vim	/^command! RMD exec "!rm ".expand("%") | bp | bd #$/;"	c
Rg	.config/nvim/init.vim	/^    command! -bang -nargs=* Rg$/;"	c
S	.config/nvim/init.vim	/^nnoremap S      :%s\/\/\/<LEFT>$/;"	m
S	.config/nvim/init.vim	/^vnoremap S      :s\/\/\/<LEFT>$/;"	m
Scratch	.config/nvim/init.vim	/^command! Scratch edit ~\/.scratch | normal G$/;"	c
W	.config/nvim/init.vim	/^cnoreabbrev W w$/;"	m
Wd	.config/nvim/init.vim	/^command! Wd write|Bd$/;"	c
[g	.config/nvim/init.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	.config/nvim/init.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
_bluetoothctl	.bin/dmenu_bluetooth	/^_bluetoothctl() {$/;"	f
_headertext	install.sh	/^_headertext(){$/;"	f
af	.config/nvim/init.vim	/^omap af <Plug>(coc-funcobj-i)$/;"	m
append_ul	.config/nvim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
ask	.config/nvim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	.config/nvim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assign_name	.config/nvim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	.config/nvim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
bang	.config/nvim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	.config/nvim/autoload/plug.vim	/^function! s:bar()$/;"	f
batchfile	.config/nvim/autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
capability	.config/i3blocks/volume	/^capability() { # Return "Capture" if the device is a capture device$/;"	f
cd/config-el	.emacs.d/init.el	/^(defconst cd\/config-el "~\/code\/dotfiles\/.emacs.d\/chris-davison.el" "Output filename for my configuration")$/;"	f
cd/config-org	.emacs.d/init.el	/^(defconst cd\/config-org "~\/code\/dotfiles\/.emacs.d\/chris-davison.org" "Path to my configuration")$/;"	f
check_back_space	.config/nvim/init.vim	/^function! s:check_back_space() abort$/;"	f
check_ruby	.config/nvim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
checkout	.config/nvim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
chsh	.config/nvim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
clean	.config/nvim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
compare_git_uri	.config/nvim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
define_commands	.config/nvim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
delete	.config/nvim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete_op	.config/nvim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
diff	.config/nvim/autoload/plug.vim	/^function! s:diff()$/;"	f
dirpath	.config/nvim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
do	.config/nvim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
doautocmd	.config/nvim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	.config/nvim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
err	.config/nvim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
esc	.config/nvim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
escrtp	.config/nvim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
execute_mode	.bin/dmenu_bluetooth	/^execute_mode() {$/;"	f
extract_name	.config/nvim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
file-mod-time	.emacs.d/init.el	/^(defun file-mod-time (filename)$/;"	f
find_name	.config/nvim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	.config/nvim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	.config/nvim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
format	.config/i3blocks/volume	/^format() {$/;"	f
format_git_log	.config/nvim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	.config/nvim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
g:echodoc#enable_at_startup	.config/nvim/init.vim	/^let g:echodoc#enable_at_startup=1$/;"	v
g:echodoc#type	.config/nvim/init.vim	/^let g:echodoc#type = 'signature'$/;"	v
g:go_fmt_command	.config/nvim/init.vim	/^let g:go_fmt_command="goimports"$/;"	v
g:go_version_warning	.config/nvim/init.vim	/^let g:go_version_warning=0$/;"	v
g:is_bash	.config/nvim/init.vim	/^let g:is_bash=1$/;"	v
g:loaded_plug	.config/nvim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:markdown_fenced_languages	.config/nvim/init.vim	/^let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'rust', 'go', 'c', 'cpp']$/;"	v
g:markdrawer_toc	.config/nvim/init.vim	/^let g:markdrawer_toc='full_index'$/;"	v
g:netrw_list_hide	.config/nvim/init.vim	/^let g:netrw_list_hide= '.*\\.swp$,\\.DS_Store,*.so,*.zip,\\.git,\\~$'$/;"	v
g:plugs_order	.config/nvim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:pymode_python	.config/nvim/init.vim	/^let g:pymode_python = 'python3'$/;"	v
g:rustfmt_autosave	.config/nvim/init.vim	/^let g:rustfmt_autosave=1$/;"	v
g:tagbar_type_rust	.config/nvim/init.vim	/^let g:tagbar_type_rust = {$/;"	v
g:tex_flavor	.config/nvim/init.vim	/^let g:tex_flavor = "latex"$/;"	v
g:vim_markdown_folding_disabled	.config/nvim/init.vim	/^let g:vim_markdown_folding_disabled = 1$/;"	v
g:vimtex_compiler_progname	.config/nvim/init.vim	/^let g:vimtex_compiler_progname = 'nvr'$/;"	v
gd	.config/nvim/init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gen_bookmarks	.bin/rofi_bookmarks.sh	/^    function gen_bookmarks()$/;"	f
gen_directories	.bin/rofi_nvim_projects.sh	/^    function gen_directories()$/;"	f
gen_directories	.bin/rofi_vscode.sh	/^    function gen_directories()$/;"	f
gen_keybinds	.bin/rofi_keybinds.sh	/^    function gen_keybinds()$/;"	f
gen_list	.bin/web-search.sh	/^gen_list() {$/;"	f
get_default_tz	.config/i3blocks/time	/^sub get_default_tz {$/;"	s
get_tz	.config/i3blocks/time	/^sub get_tz {$/;"	s
gi	.config/nvim/init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
git_validate	.config/nvim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	.config/nvim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
glob	.config/nvim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	.config/nvim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
gr	.config/nvim/init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	.config/nvim/init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
hash_match	.config/nvim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
help	.config/i3blocks/cpu_usage	/^sub help {$/;"	s
help	.config/i3blocks/temperature	/^sub help {$/;"	s
if	.config/nvim/init.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
infer_properties	.config/nvim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	.config/nvim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
install_fzf	install.sh	/^install_fzf() {$/;"	f
install_personal_repos	install.sh	/^install_personal_repos () {$/;"	f
install_plug	install.sh	/^install_plug() {$/;"	f
install_symlinks	install.sh	/^install_symlinks() {$/;"	f
install_symlinks_to_bins	install.sh	/^install_symlinks_to_bins(){$/;"	f
install_symlinks_to_dirs	install.sh	/^install_symlinks_to_dirs(){$/;"	f
install_symlinks_to_plain_files	install.sh	/^install_symlinks_to_plain_files(){$/;"	f
install_work_repos	install.sh	/^install_work_repos(){$/;"	f
is_local_plug	.config/nvim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	.config/nvim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_preview_window_open	.config/nvim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_updated	.config/nvim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
j	.config/nvim/init.vim	/^nnoremap j      gj$/;"	m
job_abort	.config/nvim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	.config/nvim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	.config/nvim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	.config/nvim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
k	.config/nvim/init.vim	/^nnoremap k      gk$/;"	m
last_non_empty_line	.config/nvim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	.config/nvim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	.config/nvim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lines	.config/nvim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
load_plugin	.config/nvim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	.config/nvim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
lock	.bin/i3exit	/^lock() {$/;"	f
lod	.config/nvim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	.config/nvim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	.config/nvim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	.config/nvim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	.config/nvim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	.config/nvim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	.config/nvim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lpad	.config/nvim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
main	.bin/update	/^main() {$/;"	f
main	.bin/web-search.sh	/^main() {$/;"	f
main	.vim/file_templates/template.py	/^def main():$/;"	f
mapleader	.config/nvim/init.vim	/^let mapleader=" "$/;"	v
names	.config/nvim/autoload/plug.vim	/^function! s:names(...)$/;"	f
new_window	.config/nvim/autoload/plug.vim	/^function! s:new_window()$/;"	f
notify	.bin/dmenu_bluetooth	/^notify() {$/;"	f
nvim_cb	.config/nvim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
parse_options	.config/nvim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
path	.config/nvim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
plug#	.config/nvim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	.config/nvim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	.config/nvim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	.config/nvim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	.config/nvim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	.config/nvim/autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_window_exists	.config/nvim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
prepare	.config/nvim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
preview_commit	.config/nvim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
progress_bar	.config/nvim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	.config/nvim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
reap	.config/nvim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
regress_bar	.config/nvim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reload_plugins	.config/nvim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
remove_rtp	.config/nvim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	.config/nvim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
reorg_rtp	.config/nvim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
retry	.config/nvim/autoload/plug.vim	/^function! s:retry()$/;"	f
revert	.config/nvim/autoload/plug.vim	/^function! s:revert()$/;"	f
rm_rf	.config/nvim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
rtp	.config/nvim/autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s	.config/nvim/init.vim	/^nmap s <Plug>(easymotion-s2)$/;"	m
s:TYPE	.config/nvim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	.config/nvim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:cpo_save	.config/nvim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:first_rtp	.config/nvim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:is_win	.config/nvim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:last_rtp	.config/nvim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	.config/nvim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	.config/nvim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	.config/nvim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	.config/nvim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:plug_buf	.config/nvim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	.config/nvim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	.config/nvim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:triggers	.config/nvim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:vim8	.config/nvim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
section	.config/nvim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
set_tz	.config/i3blocks/time	/^sub set_tz {$/;"	s
shellesc_cmd	.config/nvim/autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	.config/nvim/autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
show_documentation	.config/nvim/init.vim	/^function! s:show_documentation()$/;"	f
snapshot	.config/nvim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
source	.config/nvim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	.config/nvim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	.config/nvim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
status	.config/nvim/autoload/plug.vim	/^function! s:status()$/;"	f
status_load	.config/nvim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	.config/nvim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
switch_in	.config/nvim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	.config/nvim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	.config/nvim/autoload/plug.vim	/^function! s:syntax()$/;"	f
system	.config/nvim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	.config/nvim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
tick	.config/nvim/autoload/plug.vim	/^function! s:tick()$/;"	f
to_a	.config/nvim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	.config/nvim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
trim	.config/nvim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
update	.config/nvim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_apt	.bin/update	/^update_apt() {$/;"	f
update_finish	.config/nvim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_impl	.config/nvim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_one_by_one	.bin/update	/^update_one_by_one() {$/;"	f
update_python	.config/nvim/autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	.config/nvim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_rustup	.bin/update	/^update_rustup() {$/;"	f
update_vim	.bin/update	/^update_vim() {$/;"	f
update_vim	.config/nvim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
upgrade	.config/nvim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	.config/nvim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
usage	.bin/update	/^usage() {$/;"	f
usage	install.sh	/^usage() {$/;"	f
version_requirement	.config/nvim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
vimrc	.config/nvim/init.vim	/^augroup vimrc$/;"	a
volume	.config/i3blocks/volume	/^volume() {$/;"	f
warn	.config/nvim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
with_cd	.config/nvim/autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
wrap_cmds	.config/nvim/autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
