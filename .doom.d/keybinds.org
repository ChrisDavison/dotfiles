#+TITLE: Keybinds
#+PROPERTY: header-args :tangle "keybinds.el" :results silent

* Avy jump

Prompt for a single char, and then show a hud to jump to any word beginning with that char.
#+begin_src emacs-lisp
(map! "C-<" 'avy-goto-word-1) ;; C-S-,
#+end_src
* Text editing -- Iedit and anzu

#+begin_src emacs-lisp
(map! :n "C-;" 'iedit-mode
      :n "C-:" 'iedit-mode-toggle-on-function)

(map! "M-%" 'anzu-query-replace
      "C-M-%" 'anzu-query-replace-regexp)
#+end_src
* Jump to specific locations/files

#+begin_src emacs-lisp
(map! :leader
      :desc "<<here>>" "j h" 'jump-to-here-anchor
      :desc "todos" "j t" '(lambda () (interactive) (find-file "~/code/knowledge/todo.org"))
      :desc "work" "j w" '(lambda () (interactive) (find-file "~/code/knowledge/work.org"))
      :desc "scratch" "j s" '(lambda () (interactive) (find-file "~/code/scratch/scratch.org"))
      :desc "journal" "j j" '(lambda () (interactive) (org-capture-goto-target "j"))
      :desc "logbook" "j l" '(lambda () (interactive) (org-capture-goto-target "l"))
      :desc "last capture" "j c" '(lambda () (interactive) (org-capture-goto-last-stored))
      :desc "bookmarks" "j b" '(lambda () (interactive) (org-capture-goto-target "u")))
#+end_src
* My applications submenu

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("a" . "applications")
       (:prefix ("r" . "repoutil")
        :desc "Status of all branches" "b" #'repoutil-branchstat
        :desc "Fetch all branches" "f" #'repoutil-fetch
        :desc "List all managed repos" "l" #'repoutil-list
        :desc "List all unclean repos" "u" #'repoutil-unclean)
       (:prefix ("g" . "ripgrep")
        :desc "org notes" "o" 'rg-org
        :desc "journal" "j" 'rg-journal
        :desc "logbook" "l" 'rg-logbook)
       (:prefix ("d" . "downloader")
        :desc "quick add" "q" 'cd/nas/quick-add-download
        :desc "list" "l" 'cd/nas/list-downloads)
       ("n" 'new-in-git)
       ))
#+end_src
* Move between narrows or files

#+begin_src emacs-lisp
(map! "<f5>" 'find-previous-file
      "<f6>" 'find-next-file
      "C-<left>" 'find-previous-file
      "C-<right>" 'find-next-file)

(map! "<f7>" 'move-to-next-narrow
      "<f8>" 'move-to-previous-narrow)
#+end_src
* Org capture and agenda

#+begin_src emacs-lisp
(map! "<f1>" 'org-capture
      "<f2>" 'org-agenda
      "<f3>" '(lambda () (interactive) (org-agenda nil "co") (goto-char (point-min)))
      "<f4>" '(lambda () (interactive) (org-agenda nil "cr") (goto-char (point-min))))
#+end_src

* REFILE

#+begin_src emacs-lisp
(map! "<f9>" 'er/expand-region)

;; Emacs capture and org-mode
(map! :map org-mode-map :leader :n
      "m r a" 'org-change-state-and-archive
      "m r A" 'org-archive-to-archive-sibling
      "m r D" 'cd/do-and-archive
      "m r K" 'cd/kill-and-archive
      "m r t" 'org-refile-to-this-file
      "m r T" 'org-refile-to-this-file-level1
      "m r F" 'cd/refile-to-top-level
      "m d i" 'org-time-stamp-inactive
      "m h" 'headercount
      "o s" 'org-open-link-same-window
      "o o" 'org-open-at-point
      "o S" 'org-sidebar-toggle
      "Q" 'org-unfill-paragraph
      "N" 'org-toggle-narrow-to-subtree
      "n R" 'helm-org-rifle
      "m l u" 'org-copy-link-url
      "m l C" 'cd/org-copy-next-link)

(map! :map org-mode-map :n
      "C-x C-n" 'org-file-from-subtree
      :v "C-x C-n" 'org-file-from-selection)

(map! :map dired-mode-map :n "/" 'dired-narrow)

(map! :nv "j" 'evil-next-visual-line
      :nv "k" 'evil-previous-visual-line)

(map! :leader
      :prefix "w"
      :desc "evil-window-split (follow)" "s"
      (lambda () (interactive) (evil-window-split) (evil-window-down 1))
      :desc "evil-window-vsplit (follow)" "v"
      (lambda () (interactive) (evil-window-vsplit) (evil-window-right 1)))

(map! :after projectile :leader
      :desc "Find Org-dir note" "<SPC>" 'org-roam-find-file
      :desc "Find Org-dir project" "S-<SPC>"
      '(lambda () (interactive) (org-roam-find-file "@project "))
      :desc "Find Org-dir WORK project" "C-S-<SPC>"
      '(lambda () (interactive) (org-roam-find-file "@work "))
      )

(map! :map haskell-mode-map
      "C-x C-e" 'haskell-process-load-file)
#+end_src
