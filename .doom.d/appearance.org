#+TITLE: Appearance
#+PROPERTY: header-args :tangle "appearance.el" :results silent

* Colour Theme

** Set theme
#+BEGIN_SRC emacs-lisp
(setq theme-preferences-light '(kaolin-mono-light
                                apropospriate-light
                                kaolin-breeze
                                doom-solarized-light))

(setq theme-preferences-dark '(kaolin-eclipse
                               dracula
                               doom-solarized-dark
                               doom-palenight
                               kaolin-temple))

(setq doom-theme (nth 0 theme-preferences-dark))
#+END_SRC


** Functions to set or rotate theme

#+BEGIN_SRC emacs-lisp
(defun set-theme-dark ()
  (interactive)
  (setq doom-theme (nth 0 theme-preferences-dark))
  (doom/reload-theme))

(defun set-theme-light ()
  (interactive)
  (setq doom-theme (nth 0 theme-preferences-light))
  (doom/reload-theme))

(defun choose-pretty-theme (&optional subset)
  "Set a theme from one of the available fonts that I like"
  (interactive)
  (let* ((themes (pcase subset
                  ('light theme-preferences-light)
                  ('dark theme-preferences-dark)
                  (_ (append theme-preferences-light theme-preferences-dark))))
         (choice (ivy-read "Pick theme:" themes)))
    (setq doom-theme (intern choice))
    (doom/reload-theme)))

(defun choose-pretty-light-theme ()
  (interactive)
  (choose-pretty-theme 'light))

(defun choose-pretty-dark-theme ()
  (interactive)
  (choose-pretty-theme 'dark))


(defun next-theme (&optional backward alternate-theme-list)
  (interactive)
  (let* ((themes (if alternate-theme-list alternate-theme-list (custom-available-themes)))
         (idx-current (cl-position doom-theme themes))
         (idx-next (next-circular-index (if idx-current idx-current 0) (length themes) (if backward t nil)))
         (next (nth idx-next themes)))
    (message "%s" next)
    (setq doom-theme next)
    (doom/reload-theme)))

(defun next-theme-dark ()
  (interactive)
  (next-theme nil theme-preferences-dark))

(defun next-theme-light ()
  (interactive)
  (next-theme nil theme-preferences-light))
#+END_SRC
* Font

#+BEGIN_SRC emacs-lisp
(setq cd-fonts (--filter (member it (font-family-list))
                         '("Iosevka Term"
                           "Rec Mono Linear"
                           "Rec Mono SemiCasual"
                           "Hack"
                           "Inconsolata"
                           "Source Code Pro"
                           "Fantasque Sans Mono"
                           "CamingoCode"
                           "Roboto Mono"
                           "Liberation Mono"
                           )))

(setq cd/font-size 14
      doom-font (format "%s-%d" (nth 0 cd-fonts) cd/font-size)
      doom-variable-pitch-font (format "%s-%d" "Montserrat" cd/font-size))
#+END_SRC

** Function to iterate through fonts

#+BEGIN_SRC emacs-lisp
(defun set-pretty-font ()
  "Set a font from one of the available fonts that I like"
  (interactive)
  (setq doom-font (ivy-read "Pick font:" cd-fonts))
  (doom/reload-font))

(defun next-font ()
  (interactive)
  (let* ((pos (cl-position (car (s-split "-" doom-font)) cd-fonts :test 's-equals?))
         (next-pos (% (+ 1 pos) (length cd-fonts)))
         (next-font-name (nth next-pos cd-fonts)))
    (set-frame-font next-font-name 1)
    (setq doom-font (concat next-font-name "-14"))
    (message next-font-name)))
#+END_SRC
* Fullscreen at startup

#+BEGIN_SRC emacs-lisp
(setq fullscreen-at-startup t)
(when fullscreen-at-startup
  (add-to-list 'initial-frame-alist '(fullscreen . maximized)))
#+END_SRC

* UNFILED

=split-width-threshold= is how many columns must exist for emacs to choose to split side-by-side, rather than vertical stack.
#+BEGIN_SRC emacs-lisp
(setq split-width-threshold 150)
#+END_SRC
