#+TITLE: Emacs2.0
#+AUTHOR: Chris Davison
#+EMAIL: c.jr.davison@gmail.com
#+OPTIONS: toc:4 h:4

* make <e a snippet for emacs lisp
  
#+BEGIN_SRC emacs-lisp :results silent :tangle no
(add-to-list 'org-structure-template-alist
             '("e" "#+BEGIN_SRC emacs-lisp :tangle no :results silent\n\n#+END_SRC"))
#+END_SRC

* My Details

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(setq
 user-full-name "Chris Davison"
 user-mail-address "c.jr.davison@gmail.com"
 user-emacs-directory "~/.emacs.d")
#+END_SRC
  
* Initial setup
** Package repos and setup

Include package managers, particularly =use-package= to let package import and initialisation be easier from here on.

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; This sets up the load path so that we can override it
(package-initialize nil)

;; Load the rest of the packages
(package-initialize t)
(setq package-enable-at-startup nil)

;; Add melpa as a package source
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

;; Use-package is fantastic for concisely installing and configuring packages
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

** Random settings...
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  ;; Basically give a useful const to check if running OSX.  This may be useful
  ;; for your config, to override platform-specific behaviour (or perhaps
  ;; implement some more specificity).
  (defconst *spell-check-support-enabled* nil)
  (defconst *is-a-mac* (eq system-type 'darwin))

  ;; eval after load
  (if (fboundp 'with-eval-after-load)
      (defalias 'after-load 'with-eval-after-load)
    (defmacro after-load (feature &rest body)
      "After FEATURE is loaded, evaluate BODY."
      (declare (indent defun))
      `(eval-after-load ,feature
         '(progn ,@body))))

  
  (defun add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (setq package-enable-at-startup nil)
  (package-initialize)

  (use-package fullframe :ensure t
    :config (fullframe list-packages quit-window))

  (use-package cl-lib :ensure t
    :config (require 'cl-lib))

  (use-package diminish :ensure t)

  (use-package let-alist :ensure t)
#+END_SRC
   
#+BEGIN_SRC emacs-lisp :results silent :tangle yes
(defun delete-this-file ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (or (buffer-file-name) (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))
#+END_SRC
* vim navigation

Being a VIM user...Emacs' keybindings are quite nasty.  As such, I try to make this editing experience as close to the VIM experience as possible, while allowing for the nicety of Emacs.  Key-chord is pretty nice to keep my key presses down.

#+BEGIN_SRC emacs-lisp :tangle no :results silent
(use-package evil :ensure t
  :config (evil-mode 1))

(use-package evil-surround :ensure t
  :config (global-evil-surround-mode))

(use-package evil-leader :ensure t 
  :config (global-evil-leader-mode))

(use-package key-chord :ensure t
  :config (key-chord-mode 1))

(define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
(define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
(define-key evil-normal-state-map (kbd ";") 'evil-ex)

(key-chord-define-global "jk" 'evil-normal-state)
(key-chord-define-global "gc" 'comment-or-uncomment-region)

;; Some of these functions are only pulled in later
;; But VIM is added early incase customisation breaks.
(evil-leader/set-key
  "w" 'save-buffer
  "f" 'counsel-find-file
  "i" 'counsel-imenu
  "h" 'ivy-switch-buffer
  "s" 'swiper
  "j" 'jump-to-register
  "k" 'kill-buffer)



#+END_SRC
   
* appearance
** font
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(when (member "Fira Mono" (font-family-list))
  (set-default-font "Fira Mono 15"))
(setq line-spacing 0.2)
#+END_SRC
  
** download colorschemes

Disable themes before loading a new theme

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(defadvice load-theme (before theme-dont-propagate activate)
  (mapc #'disable-theme custom-enabled-themes))
(setq custom-safe-themes t)
#+END_SRC

Import some of my preferred themes

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(use-package solarized-theme :ensure t)
(use-package molokai-theme :ensure t)
(use-package seoul256-theme :ensure t)
(use-package color-theme-sanityinc-tomorrow :ensure t)
(use-package tao-theme :ensure t)
#+END_SRC

** Toggle between light and dark themes

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(defvar cd/theme_dark nil)
(defvar cd/dark_theme 'molokai)
(defvar cd/light_theme 'github-theme)

(defun toggle-dark-theme ()
  "Toggle theme between light and dark."
  (interactive)
  (if cd/theme_dark
      (progn
        (load-theme cd/dark_theme t)
        (setq cd/theme_dark nil))
    (progn
      (load-theme cd/light_theme t)
      (setq cd/theme_dark t))))
(setq cd/theme_dark nil)
(load-theme cd/dark_theme)
#+END_SRC

** maybe suspend the frame (<C-z>)
   
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; *maybe* suspend frame
;; This is useful if running a mac, so that C-z wont hide it.  Considered
;; 'appearance' as I want to see windows.
(defun maybe-suspend-frame ()
  "Don't suspend the frame if it's a Mac."
  (interactive)
  (unless (and *is-a-mac* window-system)
    (suspend-frame)))
(global-set-key (kbd "C-z") 'maybe-suspend-frame)
#+END_SRC

** suppress UI crap  

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; suppress gui features
(setq use-file-dialog nil)
(setq use-dialog-box nil)
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message t)

;; Hide tool bar,  scroll bar and borders
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'set-scroll-bar-mode)
  (set-scroll-bar-mode nil))

(let ((no-border '(internal-border-width . 0)))
  (add-to-list 'default-frame-alist no-border)
  (add-to-list 'initial-frame-alist no-border))

;; highlight current line and no blinking cursor
(global-hl-line-mode 1)
(blink-cursor-mode 0)
(setq linum-format "%d ")

;; alias for yes-or-no
;; This is again a quality of life thing, to allow you to hit yes or no by using
;; y or n.
(defalias 'yes-or-no-p 'y-or-n-p)

;; faster keystroke echoing (setq echo-keystrokes 0.1)

;; tabs to spaces, and tab-related things
(setq tab-stop-list (number-sequence 2 200 2))
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

;; show line and column number in status bar
(line-number-mode 1)
(column-number-mode 1)

;; stop scrolling jumping multiple lines
(setq scroll-step           1
      scroll-conservatively 10000)

;; scratch buffer - initial message
(setq-default initial-scratch-message ";; Scratch pad\n\n")

;; font-locking
;; Replace any occurrence of 'lambda' with the actual symbol.
(global-prettify-symbols-mode +1)

#+END_SRC
* history and sessions

History, backups, session and undo Disk space is plentiful.  Keep backups and history.  Also, move the backups to the appropriate dir,so the backup files =.*~= don't clutter.

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms
      '((".*" "~/.emacs.d/auto-save-list/" t)))

(setq savehist-file (expand-file-name "savehist" user-emacs-directory))
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

;; Counting 'recent files' as part of history
(use-package recentf :ensure t)
(setq recentf-max-saved-items 200)
(setq recentf-max-menu-items 15)
(recentf-mode)

;; Always save the desktop, the current workspace config
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600)
(desktop-save-mode 1)

;; Reload when file changed on disk
(global-auto-revert-mode t)


#+END_SRC

** undo-tree

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; undo tree  - visualize your undos and branches

;; People often struggle with the Emacs undo model, where there's
;; really no concept of "redo" - you simply undo the undo.
;;
;; This lets you use =C-x u= (=undo-tree-visualize=) to visually walk
;; through the changes you've made, undo back to a certain point (or
;; redo), and go down different branches.
(use-package undo-tree :ensure t
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-timestamps nil)
  (setq undo-tree-visualizer-diff t))
#+END_SRC
  
* editing

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; parentheses

(show-paren-mode 1)
(use-package smartparens :ensure t
  :config 
  (require 'smartparens-config)
  (add-hook 'prog-mode-hook #'smartparens-strict-mode)
  (key-chord-define-global ">)" 'sp-forward-slurp-sexp)
  (key-chord-define-global ">(" 'sp-forward-barf-sexp)
  (key-chord-define-global "<)" 'sp-backward-slurp-sexp)
  (key-chord-define-global "<(" 'sp-backward-barf-sexp))

;; clean up spaces
(global-set-key (kbd "C-SPC") 'cycle-spacing)

;; expand region
(use-package expand-region :ensure t
  :bind ("C-=" . er/expand-region))

;; word wrapping and truncation
;; Couldn't get this working directly...so functionalise it
(defun trunc-wrap()
  "Turn on truncation and word wrapping"
  (interactive)
  (if truncate-lines 
      (progn
        (setq truncate-lines nil)
        (setq word-wrap t)
        (message "Truncation and word wrap enabled"))
    (progn 
      (setq truncate-lines t)
      (setq word-wrap nil)
      (message "Truncation and word wrap disabled"))))
(key-chord-define-global "tw" 'trunc-wrap)
(setq truncate-lines t)
(setq word-wrap t)

;; aggressive indentation
(use-package aggressive-indent :ensure t
  :config (global-aggressive-indent-mode))

;; indent after newline
(global-set-key (kbd "RET") 'newline-and-indent)
(defun sanityinc/newline-at-end-of-line ()
  "Move to end of line, enter a newline, and reindent."
  (interactive)
  (move-end-of-line 1)
  (newline-and-indent))

#+END_SRC
  
* language-specific config
** clojure

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; Cider for interactive clojure programming
(use-package flycheck-clojure :ensure t)

(use-package cider :ensure t
  :config
  (setq nrepl-popup-stacktraces nil)
  (after-load 'cider
    (add-hook 'cider-mode-hook 'eldoc-mode)
    (add-hook 'cider-repl-mode-hook 'subword-mode)
    (add-hook 'cider-repl-mode-hook 'smartparens-mode)
    (add-hook 'cider-repl-mode-hook 'paredit-mode)
    (after-load 'clojure-mode
      (after-load 'flycheck
        (flycheck-clojure-setup)))))
#+END_SRC  
   
** markdown

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(use-package markdown-mode :ensure t
  :config
  (add-auto-mode 'markdown-mode "\\.\\(md\\|markdown\\)\\'")
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
  (add-hook 'markdown-mode-hook 'cd/auto-fill-at-80))

(use-package pandoc-mode :ensure t :diminish "")
(defun cd/yank-md ()
  "Yank a markdown link and enter a description for it."
  (interactive)
  (insert "[")
  (insert (read-from-minibuffer "Link text: "))
  (insert "](")
  (yank)
  (insert ")"))
(global-set-key (kbd "<f5>") 'cd/yank-md)
#+END_SRC   

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(use-package flycheck :ensure t)
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(javascript-jshint)))

(flycheck-add-mode 'javascript-eslint 'web-mode)

(setq-default flycheck-temp-prefix ".flycheck")
(setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(json-jsonlist)))

;; not sure if add-auto-mode works like the setq...so leaving for now
(defun cd/auto-fill-at-80 ()
  "Use auto fill mode and wrap at col 80."
  (progn
    (auto-fill-mode)
    (set-fill-column 80)))

(diminish 'hs-minor-mode)
(diminish 'smartparens-mode)

#+END_SRC
   
** rust
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(use-package rust-mode :ensure t)
(use-package flymake-rust :ensure t)
(use-package flycheck-rust :ensure t)

(use-package company :ensure t
  :diminish company-mode
  :config (setq company-tooltip-align-annotations t)
  :bind (("TAB" . company-indent-or-complete-common)))

(use-package cargo :ensure t)
#+END_SRC
   
** go
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(use-package go-mode :ensure t
  :config
  (add-hook 'before-save-hook 'gofmt-before-save)
  (setq gofmt-command "goimports"))
#+END_SRC
** c
   
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(defun my-c-mode-font-lock-if0 (limit)
  (save-restriction
    (widen)
    (save-excursion
      (goto-char (point-min))
      (let ((depth 0) str start start-depth)
        (while (re-search-forward "^\\s-*#\\s-*\\(if\\|else\\|endif\\)" limit 'move)
          (setq str (match-string 1))
          (if (string= str "if")
              (progn
                (setq depth (1+ depth))
                (when (and (null start) (looking-at "\\s-+0"))
                  (setq start (match-end 0)
                        start-depth depth)))
            (when (and start (= depth start-depth))
              (c-put-font-lock-face start (match-beginning 0) 'font-lock-comment-face)
              (setq start nil))
            (when (string= str "endif")
              (setq depth (1- depth)))))
        (when (and start (> depth 0))
          (c-put-font-lock-face start (point) 'font-lock-comment-face)))))
  nil)

(defun my-c-mode-common-hook ()
  (font-lock-add-keywords
   nil
   '((my-c-mode-font-lock-if0 (0 font-lock-comment-face prepend))) 'add-to-end))

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

#+END_SRC
   
** web stuff
   
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(use-package haml-mode :ensure t)
(use-package sass-mode :ensure t)
(use-package scss-mode :ensure t
  :config (setq-default scss-compile-at-save t))
(use-package js2-mode :ensure t)
(use-package json-mode :ensure t)
(use-package coffee-mode :ensure t)
(use-package nodejs-repl :ensure t)
(use-package js-comint :ensure t
  :config
  (setq inferior-js-program-command "node")
  (add-hook 'js3-mode-hook
            '(lambda ()
               (local-set-key "\C-x\C-e" 'js-send-last-sexp)
               (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
               (local-set-key "\C-cb" 'js-send-buffer)
               (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
               (local-set-key "\C-cl" 'js-load-file-and-go))))

(setq inferior-js-mode-hook
      (lambda ()
        (ansi-color-for-comint-mode-on) ;; We like nice colors
        (add-to-list ;; Deal with some prompt nonsense
         'comint-preoutput-filter-functions
         (lambda (output)
           (replace-regexp-in-string "\033\\[[0-9]+[GK]" "" output)))))

(defun my-web-mode-hook ()
  "Hooks for Web mode.  Adjust indent."
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2)
  (add-hook 'web-mode-hook 'my-web-mode-hook))

(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-conten-type "jsx")
      (let ((web-mode-enable-part-face nil))
        ad-do-it)
    ad-do-it))

;; Colourize CSS literals
(use-package rainbow-mode :ensure t
  :config 
  (add-hook 'css-mode-hook 'rainbow-mode)
  (add-hook 'html-mode-hook 'rainbow-mode)
  (add-hook 'sass-mode-hook 'rainbow-mode))


#+END_SRC
* more navigation...i
** searching
   
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; Show current and total matches while searching
(use-package anzu
  :ensure t
  :diminish anzu-mode
  :bind (([remap query-replace-regexp] . anzu-query-replace-regexp)
         ([remap query-replace] . anzu-query-replace))
  :config (global-anzu-mode t))

;; DEL during isearch should edit the search string, not jump back to the previous result
(define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)


;; smartscan (Vim *)
;; From https://github.com/itsjeyd/emacs-config/blob/emacs24/init.el
;; This basically allows you to do something similar to VIM *...i.e. it'll jump forward or backward to the next occurence of the symbol under the cursor.
;; Bound to =M-n= and =M-b= by default, I think.
(use-package smartscan :ensure t
  :config (global-smartscan-mode t))
#+END_SRC

** window-switching hud   

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; Prompt with a hud when switching windows, if more than 2 windows
(use-package switch-window
  :ensure t
  :config (setq switch-window-shortcut-style 'alphabet)
  :bind ("C-x o" . switch-window))
#+END_SRC

** interactively modify buffer list

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(use-package fullframe :ensure t)
(after-load 'buffer
  (fullframe ibuffer ibuffer-quit))

(use-package ibuffer-vc :ensure t)

(defun ibuffer-set-up-preferred-filters ()
  (ibuffer-vc-set-filter-groups-by-vc-root)
  (unless (eq ibuffer-sorting-mode 'filename/process)
    (ibuffer-do-sort-by-filename/process)))

(add-hook 'ibuffer-hook 'ibuffer-set-up-preferred-filters)

(after-load 'ibuffer
  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size))))))


;; Explicitly require ibuffer-vc to get its column definitions, which
;; can't be autoloaded
(after-load 'ibuffer
  (require 'ibuffer-vc))

;; Modify the default ibuffer-formats (toggle with `)
(setq ibuffer-formats
      '((mark modified read-only vc-status-mini " "
              (name 18 18 :left :elide) " "
              (size-h 9 -1 :right) " "
              (mode 16 16 :left :elide) " "
              filename-and-process)
        (mark modified read-only vc-status-mini " "
              (name 18 18 :left :elide) " "
              (size-h 9 -1 :right) " "
              (mode 16 16 :left :elide) " "
              (vc-status 16 16 :left) " "
              filename-and-process)))

(setq ibuffer-filter-group-name-face 'font-lock-doc-face)

(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC







#+BEGIN_SRC emacs-lisp :tangle yes :results silent
;; Interactively modify buffer list



;; Code folding

(use-package fold-dwim :ensure t)
(use-package fold-dwim-org :ensure t)

(add-hook 'prog-mode-hook #'hs-minor-mode)
(add-hook 'prog-mode-hook #'fold-dwim-org/minor-mode)



;; navigation of ~everything (helm OR ivy)

(use-package ivy :ensure t
  :diminish (ivy-mode . "")
  :bind
  (:map ivy-mode-map
        ("C-'" . ivy-avy)
        ("C-c h" . ivy-switch-buffer)
        ("C-c s" . swiper)
        )
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 15)
  (setq ivy-count-format "")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
        '((t . ivy--regex-plus))))

(use-package counsel :ensure t
  :bind*
  (("C-x f" . counsel-find-file)
   ("C-c i" . counsel-imenu)
   ("C-c a" . counsel-ag)
   ("C-c g s" . counsel-grep-or-swiper)
   ("C-c b" . counsel-descbinds)
   ("M-x" . counsel-M-x)))

(use-package swiper :ensure t)

;; jump to register (file shortcuts)
(set-register ?i (cons 'file "~/Dropbox/n/notes/capture.txt"))
(set-register ?t (cons 'file "~/Dropbox/n/notes/todo.txt"))

#+END_SRC
  
* random utility settings

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
(use-package s :ensure t)
(use-package f :ensure t)

;; help - guide-key
;; It's hard to remember keyboard shortcuts. The =guide-key= package
;; pops up help after a short delay.

(use-package guide-key :ensure t
  :diminish guide-key-mode
  :init (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
  :config (guide-key-mode 1))

;; utf-8
;; From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

#+END_SRC
* <platform>

#+BEGIN_EXAMPLE
;;; Code:
(when *is-a-mac*
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'none)
  (setq default-input-method "MacOSX")
  (use-package exec-path-from-shell :ensure t
    :config
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
    (exec-path-from-shell-copy-env "GOPATH"))
  
  ;;Make the mouse wheel/trackpad less jerky
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control))))
  (dolist (multiple '("" "double-" "triple-"))
    (dolist (direction '("right" "left"))
      (global-set-key (kbd (concat "<" multiple "wheel-" direction ">")) 'ignore)))

  ;;And give emacs some of the expected OS X keybinds
  (global-set-key (kbd "M-`") 'ns-next-frame)
  (global-set-key (kbd "M-h") 'ns-do-hide-emacs)
  (global-set-key (kbd "M-˙") 'ns-do-hide-others)
  (after-load 'nxml-mode (define-key nxml-mode-map (kbd "M-h") nil))
  (global-set-key (kbd "M-ˍ") 'ns-do-hide-others) ;; what describe-key reports for cmd-option-h
  (global-set-key (kbd "M-<up>") 'toggle-frame-fullscreen) ;;Bind Meta-<UP> to fullscreen toggling
  (global-set-key (kbd "<f10>") 'toggle-frame-fullscreen) ;;Bind Meta-<UP> to fullscreen toggling
  )
;;; my-osx.el ends here

#+END_EXAMPLE
  
* experimental

#+BEGIN_SRC emacs-lisp :results silent :tangle yes
  ;; =================================
  ;; ====== Magit - Git in Emacs =====
  ;; =================================
  (use-package magit :ensure t)

  ;; =================================
  ;; ======== Elpy for Python ========
  ;; =================================
  (use-package elpy :ensure t
    :config
    (add-hook 'python-mode-hook (lambda () (elpy-enable)))
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "--simple-prompt -i"))

  ;; need to set up VENV usage
  ;; Python
  (use-package virtualenvwrapper :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell)
    (setq venv-location "/Users/davison/.envs/")
    (add-hook 'python-mode-hook (lambda () (venv-workon "ml"))))

  ;; =================================
  ;; ======== Rainbow brackets =======
  ;; =================================
  ;; Thought i detected a slowdown with this, so not auto-including
  ;; (use-package rainbow-delimiters
  ;;   :ensure t
  ;;   :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))


  ;; =================================
  ;; ========== Racer Config =========
  ;; =================================
  ;; Auto-completion for Rust

  ;; (use-package racer
  ;;   :ensure t
  ;;   :config
  ;;   (setq racer-cmd "/Users/davison/prog/z__NOT_MINE/racer/target/release/racer")
  ;;   (setq racer-rust-src-path "/Users/davison/prog/z__NOT_MINE/rust_1.3_src/src/")
  ;;   (add-hook 'rust-mode-hook #'racer-mode)
  ;;   (add-hook 'racer-mode-hook #'eldoc-mode)
  ;;   (add-hook 'rust-mode-hook #'cargo-minor-mode)
  ;;   (add-hook 'racer-mode-hook #'company-mode))


  ;; =================================
  ;; ========== Latex Config =========
  ;; =================================
  ;; (require-package 'auctex)
  ;; (setq TeX-auto-save t)
  ;; (setq TeX-parse-self t)
  ;; (setq TeX-save-query nil)

  ;; (setq ispell-program-name "aspell") ; could be ispell as well, depending on your preferences
  ;; (setq ispell-dictionary "english") ; this can obviously be set to any language your spell-checking program supports

  ;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  ;; (add-hook 'LaTeX-mode-hook 'flyspell-buffer)

  ;; (defun turn-on-outline-minor-mode ()
  ;;   (outline-minor-mode 1))

  ;; (add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
  ;; (add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)
  ;; (setq outline-minor-mode-prefix "\C-c \C-o") ; Or something else

  ;; ;; Manage citations
  ;; (require 'tex-site)
  ;; (autoload 'reftex-mode "reftex" "RefTeX Minor Mode" t)
  ;; (autoload 'turn-on-reftex "reftex" "RefTeX Minor Mode" nil)
  ;; (autoload 'reftex-citation "reftex-cite" "Make citation" nil)
  ;; (autoload 'reftex-index-phrase-mode "reftex-index" "Phrase Mode" t)
  ;; (add-hook 'latex-mode-hook 'turn-on-reftex)
  ;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  ;; (setq LaTeX-eqnarray-label "eq"
  ;;       LaTeX-equation-label "eq"
  ;;       LaTeX-figure-label "fig"
  ;;       LaTeX-table-label "tab"
  ;;       LaTeX-myChapter-label "chap"
  ;;       TeX-auto-save t
  ;;       TeX-newline-function 'reindent-then-newline-and-indent
  ;;       TeX-parse-self t
  ;;       TeX-style-path
  ;;       '("style/" "auto/"
  ;;         "/usr/share/emacs21/site-lisp/auctex/style/"
  ;;         "/var/lib/auctex/emacs21/"
  ;;         "/usr/local/share/emacs/site-lisp/auctex/style/")
  ;;       LaTeX-section-hook
  ;;       '(LaTeX-section-heading
  ;;         LaTeX-section-title
  ;;         LaTeX-section-toc
  ;;         LaTeX-section-section
  ;;         LaTeX-section-label))


  ;; =================================
  ;; ========== Helm config ==========
  ;; =================================
  ;; Switched to using ivy, however keeping this around whilst I get
  ;; used to Ivy.  Incase i want to switch back.

  ;; ("C-c i" . helm-imenu)
  ;; ("C-c r" . helm-regexp)
  ;; ("M-y" . helm-show-kill-ring)

  ;; (use-package helm
  ;;   :diminish helm-mode
  ;;   :ensure t
  ;;   :init (require 'helm-config)
  ;;   :config 
  ;;   (setq helm-candidate-number-limit 100
  ;;         helm-idle-delay 0.0
  ;;         helm-input-idle-delay 0.01
  ;;         helm-quick-update t
  ;;         helm-M-x-requires-pattern nil
  ;;         helm-ff-skip-boring-files t
  ;;         helm-recentf-fuzzy-match t
  ;;         helm-buffers-fuzzy-matching t
  ;;         helm-locate-fuzzy-match t
  ;;         helm-imenu-fuzzy-match t
  ;;         helm-M-x-fuzzy-match t
  ;;         helm-semantic-fuzzy-match t
  ;;         helm-apropos-fuzzy-match t
  ;;         helm-split-window-in-side-p t)
  ;;   (helm-mode 1)
  ;;   (helm-autoresize-mode nil)
  ;;   :bind (("C-c h" . helm-mini)
  ;;          ("C-c a" . helm-apropos)
  ;;          ("C-c o" . helm-occur)
  ;;          ("C-c s" . helm-swoop)
  ;;          ("C-c i" . helm-imenu)
  ;;          ("C-c r" . helm-regexp)
  ;;          ("C-c g" . helm-do-grep)
  ;;          ("C-x C-f" . helm-find-files)
  ;;          ("M-y" . helm-show-kill-ring)
  ;;          ("M-x" . helm-M-x)))

  ;; (use-package helm-descbinds
  ;;   :ensure t
  ;;   :bind (("C-c b" . helm-descbinds)))

  ;; =================================
  ;; === Ace-mode - Jump to letter ===
  ;; =================================
  ;; ace-mode is fantastic.  It's a hybrid of ace-jump and isearch
  ;; Hybrid of isearch and ace-jump.  Type a single character in search and words 
  ;; beginning with that will highlight.  Press the highlighted letter to jump to 
  ;; that occurence
  (use-package ace-jump-mode :ensure t)
  (use-package ace-isearch :ensure t :diminish "")
  (global-ace-isearch-mode t)

  (defun ipython()
    (interactive)
    (ansi-term "/Users/davison/.envs/ml/bin/ipython" "ipython"))

  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "--simple-prompt -i --pprint")

  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))

#+END_SRC

* org-mode

Powerful note taking with org-mode

Set up org for taking notes, using Dropbox/docs as my main
folder. Also, set up some nice config for org todo and agenda
stuff. =org-refile= lets you organize notes by typing in the
headline to file them under.  

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (global-set-key (kbd "C-c q") 'auto-fill-mode)

  (use-package org
    :ensure t
    :bind (("<f1>" . org-capture)
           ("<f2>" . org-agenda)
           ("<f3>" . org-agenda-list)
           ("<f4>" . org-timeline))
    :config
    (setq org-directory "~/Dropbox/n/notes")
    (setq org-default-notes-file "~/Dropbox/n/notes/inbox.org")
    (setq org-src-window-setup 'current-window)
    (setq org-src-fontify-natively t)
    (setq org-agenda-files
          (delq nil (mapc (lambda (x) (and (file-exists-p x) x))
                          '("~/Dropbox/n/notes/"))))
    (setq org-todo-keywords 
          '((sequence "-TODO-" "-WIP-" "|" "-DONE-" "-CANCELLED-")))
    (setq org-startup-indented t)

    ;; Settings for refiling
    (setq org-reverse-note-order t)
    (setq org-refile-use-outline-path nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-refile-use-cache nil)
    (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
    (setq org-blank-before-new-entry nil)
    (add-hook 'org-mode-hook 'auto-fill-mode)
    (setq fill-column 80))

  (use-package htmlize :ensure t)
  (use-package org-bullets :ensure t
    :disabled f
    :config (org-bullets-mode 1))

  ;; This makes it easier to add links from outside.
  (defun sacha/yank-more ()
    "Yank into an org link."
    (interactive)
    (insert "[[")
    (yank)
    (insert "][more]]"))
  (global-set-key (kbd "<f6>") 'sacha/yank-more)


  ;; Paste a link into an org file document, using the currently
  ;; selected text as the description

  ;; Something like Sacha Chua's yank-more, but using the current region
  ;; as 'more'

  ;; Below is /kind of/ along the right lines, but need to make it work
  ;; with either the kill ring or the clipboard, as well as removing the
  ;; current region.

  (setq save-interprogram-paste-before-kill t)

  (defun cd/yank-with-selection-as-description (title)
    (interactive "MLink Title: \n")
    (insert "[[")
    (clipboard-yank)
    (insert "][")
    (insert title)
    insert "]]"
    (message "Yanked with Selection"))

  (global-set-key (kbd "<f7>") 'cd/yank-with-selection-as-description)

  ;; capture - templates
  ;; =org-capture= lets you create templates for jotting down info of
  ;; various kinds.


  (setq org-capture-templates
        '(("q" "quotes" entry
           (file "~/Dropbox/n/notesquotes.org")
           "* %^{WHAT} ** %^{WHO? WHERE?}\n%^{QUOTE}"
           :immediate-finish)

          ("t" "todo" item
           (file "~/Dropbox/n/notestodo.org")
           "- %^{PRIORITY} %^{WHEN} %^{TASK} %^{CONTEXT} %^{TAGS}"
           :immediate-finish)

          ("e" "engd" entry
           (file+headline "~/Dropbox/n/notesinbox.org" "EngD")
           "** %^{WHAT}\n%?"
           :immediate-finish)

          ("l" "logbook" plain
           (file+datetree "~/Dropbox/n/notesengd/logbook2016.org")
           "%^{LOGBOOK ENTRY}\n\n"
           :immediate-finish)

          ("n" "note" item
           (file+headline "~/Dropbox/n/notesinbox.org" "REFILE")
           "%^{NOTE}\n"
           :immediate-finish)

          ("p" "plain note" plain
           (file+headline "~/Dropbox/n/notesinbox.org" "REFILE")
           "%^{NOTE}\n"
           :immediate-finish)


          ("u" "url" item
           (file+headline "~/Dropbox/n/notesinbox.org" "REFILE")
           "[[%^{URL}][%^{DESCRIPTION}]]\n"
           :immediate-finish)
          ))


  ;; indent org babel src
  ;; In an Org-Babel block, run my/org-cleanup to fix indentation

  (defun my/org-cleanup ()
    (interactive)
    (org-edit-special)
    (indent-buffer)
    (org-edit-src-exit))

  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (global-set-key (kbd "C-x c") 'my/org-cleanup)


  ;; babel
  (setq org-babel-load-languages
        '((emacs-lisp . t)
          (R . t)
          (Python . t)
          (Rust . t)
          (Go . t)))

  (setq org-confirm-babel-evaluate nil)

  (define-skeleton org-skeleton
    "Header info for a emacs-org file."
    "-----\n"
    "#+TITLE: " (skeleton-read "Title: ") "\n"
    "#+AUTHOR: Chris Davison\n"
    "#+EMAIL: c.jr.davison@gmail.com\n"
    "#+OPTIONS: toc:2 num:nil html-postamble:nil\n"
    "#+PROPERTY: header-args :tangle " (skeleton-read "Tangle filename: ") "\n")
  ;;(global-set-key [C-S-f4] 'org-skeleton)

  ;; agenda
  (setq org-agenda-files '("~/Dropbox/n/notes/inbox.org"
                           "~/Dropbox/n/notes/logbook.org"
                           "~/Dropbox/n/notes/todo.org"))
#+END_SRC

* todo.txt

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (use-package todotxt :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\todo.txt\\'" . todotxt-mode)))
#+END_SRC

* testing grounds

#+BEGIN_SRC rust :tangle yes :results raw
  let v: vec![1, 2, 3];
  println!("{:?}", v);
#+END_SRC
