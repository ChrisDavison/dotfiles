" vim: set foldmethod=marker foldlevel=2:
" Chris Davison's Vimrc

" SETTINGS {{{ 

" --- Leader at the top to be obvious and easy to modify
let mapleader="\\"

" --- Helper functions for environment, should they be needed elsewhere
let s:haswin = has('win32') || has('win64')
let s:darwin = has('mac')

" --- Some useful settings that need documented
set nocompatible
set autochdir
syntax on
filetype plugin indent on
set encoding=utf-8
scriptencoding utf-8
set showcmd
set wrap lbr
let &showbreak = '...'
set breakindent
set omnifunc=syntaxcomplete#Complete
set number
set iskeyword=a-z,A-Z,_,.,39
set hidden
set viminfo='10,<50,s10,%,h,n~/.viminfo
set nospell
set shell=/bin/zsh
set foldenable " Don't fold by default
set foldlevelstart=1
set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮,nbsp:×,eol:¬
set autoread
set updatetime=1000

" --- Search options 
set incsearch " Search as you type
set gdefault " By default, replace all matches on a line (i.e. always s///g)
set hlsearch " Highlight search results
set ignorecase
set smartcase
set magic
set backspace=indent,eol,start

" --- Various coding preferences 
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoread
set clipboard=unnamed
set lazyredraw
set laststatus=2
set nrformats=
set title
set sidescrolloff=15
set sidescroll=1

" --- Put all temp files in one place 
set backup
set backupcopy=yes
set backupdir=~/.backup,.
set directory=~/.temp,.

" --- Wildmenu config 
set wildmenu
set wildmode=list:longest

"""" Ignore certain files and directories in Wildmenu
set wildignore=*.o,*.obj,*~ 
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" -- Statusbar
set statusline=%<[%n]\ %F\ %m%r%y\ %{exists('g:loaded_fugitive')?fugitive#statusline():''}\ %=%-14.(%l,%c%V%)\ %P
" }}}
" PLUGIN INSTALL {{{ 

call plug#begin('~/.vim/plugged')

Plug 'fatih/vim-go'                               " Syntax: Go
Plug 'pangloss/vim-javascript'                    " Syntax: Javascript
Plug 'racer-rust/vim-racer'                       " Support for Rust & Racer
Plug 'godlygeek/tabular'                          " Support for formatting tables
Plug 'plasticboy/vim-markdown'                    " Syntax: Markdown
Plug 'rbonvall/snipmate-snippets-bib'             " Snippets for bibtex files
Plug 'ekalinin/Dockerfile.vim'                    " Syntax: Docker
Plug 'leafgarland/typescript-vim'                 " Language: Typescript
Plug 'udalov/kotlin-vim'                          " Language: Kotlin
Plug 'jalvesaq/Nvim-R'                            " Language: R
Plug 'shime/vim-livedown'                         " Markdown preview
Plug 'ChrisDavison/daynight.vim'                  " Toggle between dark and light themes
Plug 'ChrisDavison/scheduling.vim'                " Org-mode like TODO/WIP/DONE rotation
Plug 'Konfekt/FastFold'                           " Refreshing folds only on save, or fold-usage
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'bps/vim-textobj-python'                     " Text objects for python
Plug 'ctrlpvim/ctrlp.vim'                         " CtrlP for navigation
Plug 'dahu/vim-fanfingtastic'                     " Make 'F' work across newlines
Plug 'dhruvasagar/vim-table-mode'
Plug 'easymotion/vim-easymotion'                  " Easily navigate to any character on screen
Plug 'ervandew/supertab'
Plug 'garbas/vim-snipmate'
Plug 'guns/vim-sexp'
Plug 'honza/vim-snippets'
Plug 'jpalardy/vim-slime'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'                          " Distraction free mode
Plug 'junegunn/limelight.vim'                     " Typewriter mode for distraction free
Plug 'junegunn/rainbow_parentheses.vim'           " Different colours for each paren pair
Plug 'junegunn/vim-easy-align'
Plug 'kana/vim-textobj-user'                      " Custom text objects ('verbs')
Plug 'kkoenig/wimproved.vim'
Plug 'lervag/vimtex'                              " Syntax: Latex
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'mattn/webapi-vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'nvie/vim-flake8'                            " Lint with flake8
Plug 'paulhybryant/vim-textobj-path'              " Text object for paths
Plug 'rking/ag.vim'                               " Support for TheSilverSearcher
Plug 'tacahiroy/ctrlp-funky'                      " CtrlP through functions/tags
Plug 'terryma/vim-expand-region'                  " Keybind to expand the scope of your selection
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-fugitive'                         " Better git integration with vim
Plug 'tpope/vim-obsession'                        " Better session management with vim
Plug 'tpope/vim-sensible'                         " Sensible defaults
Plug 'tpope/vim-sexp-mappings-for-regular-people' " Better Sexp mappings
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-scripts/a.vim'
Plug 'vim-scripts/utl.vim'
Plug 'wellle/targets.vim'
Plug 'w0rp/ale'

call plug#end()

" }}}
" APPEARANCE {{{ 

if has('gui_running')
    set encoding=utf-8
    set guifont=Input:h18,Input_Mono:h18,Fira_Code:h18
    
    " Disable menu bollocks
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=R
    set guioptions-=L
    set guioptions-=l
else
    if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
       set t_Co=256
    else
       colorscheme default
       set t_Co=8
       set t_Sf=[3%dm
       set t_Sb=[4%dm
    endif
    if $TMUX != ""
       set t_ut=
    endif
endif

" Variables for theme switching using my custom plugin daynight.vim
set bg=dark
let g:themeswitch_day='paramount'
let g:themeswitch_night='seoul256'
if has('gui')
    let g:themeswitch_day='paramount'
    let g:themeswitch_night='molokai'
endif
execute 'colorscheme ' . g:themeswitch_night
" }}}
" ABBREVIATIONS {{{ 

" Command abbreviations
cnoreabbrev E e
cnoreabbrev W w
cnoreabbrev WQ wq
cnoreabbrev Q q
cnoreabbrev QA qa
cnoreabbrev Qa qa
cnoreabbrev Bd bd 

" Shortcuts for utility inputs
iabbrev @@ c.jr.davison@gmail.com
iabbrev TD **TODO**
iabbrev EX **EXAMPLE:**
iabbrev E: Explain:
iabbrev Q? **Q?** 
iabbrev ACT **ACTION:**
iabbrev ASM *Assume* :: 
iabbrev T4 $\therefore$
iabbrev t4 &there4;
iabbrev IMPL $\implies$
iabbrev invq ¿
iabbrev *@ **email:**
iabbrev EXP **experiment:**

" Economics-specific abbreviations
iabbrev gnss goods and services
iabbrev gns good and service
iabbrev eqb equilibrium
iabbrev govt government

" HTML codes
iabbrev ndash –
iabbrev mdash —

" Unicode symbols
iabbrev rarr →
iabbrev larr ←
iabbrev lrarr ⇔
iabbrev implarr ⇒
iabbrev forall ∀
iabbrev pardif ∂
iabbrev thereexists ∃
iabbrev notexists ∄
iabbrev memberof ∈
iabbrev notmemberof ∉
iabbrev endproof ∎
iabbrev summ ∑
iabbrev prodd ∏
iabbrev isequal ≡
iabbrev logicint ⋂
iabbrev logicand ∧
iabbrev logicor ∨
iabbrev logicnot ¬
iabbrev approxx ≈
" }}}
" KEYBINDS {{{ 
" Navigation {{{2
" Move splits/windows
map <C-w><C-h> <C-w><S-h>
map <C-w><C-j> <C-w><S-j>
map <C-w><C-k> <C-w><S-k>
map <C-w><C-l> <C-w><S-l>

" Move by VISUAL lines
nnoremap  <buffer> <silent> <C-k> gk
nnoremap  <buffer> <silent> <C-j> gj
nnoremap  <buffer> <silent> 0 g0
nnoremap  <buffer> <silent> <C-$> g$
vmap  <buffer> <silent> k gk
vmap  <buffer> <silent> j gj
vmap  <buffer> <silent> 0 g0
vmap  <buffer> <silent> $ g$

" Select what was pasted
noremap gV `[v`]

" Select ALL
nnoremap <leader>a ggVG

" Buffer/File/Function/Outline navigation (CtrlP versus FZF)
let s:prefer_fzf=1
nnoremap <leader>b  :CtrlPBuffer<Cr>
nnoremap <leader>p  :CtrlP<Cr>
nnoremap <leader>ll :Lines<cr>
nnoremap <leader>lb :BLines<cr>
nnoremap <leader>m :Marks<cr>

if s:prefer_fzf && !has('gui_running')
    nnoremap <leader>b :Buffers<Cr>
    nnoremap <leader>p :Files<Cr>
endif

" Funky (CtrlP for functions)
nnoremap <leader>fu :CtrlPFunky<Cr>
nnoremap <leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

" Modify/source my VIMRC
nnoremap <leader>ev :e $MYVIMRC<Cr>G
nnoremap <leader>sv :so $MYVIMRC<Cr>

" Backspace goes to `alternate` file
nnoremap <BS> <C-^>

" }}}2
" Search/replace {{{2

" search something, then use 'S' to to a search-replace using that search.
nmap S :%s///<LEFT>

" highlight something, then use 'S' to use a search-replace with this highlight
vnoremap S :s///<LEFT>

" remove highlighting after searches
nnoremap <silent> <leader>/ :nohlsearch<CR>
" }}}2

" Indent/De-dent visual selection
vnoremap < <gv
vnoremap > >gv
" }}}2
" Miscellany {{{2
" Toggle certain functionality
nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader>lt :LivedownToggle<cr>
" -- hidden character visibility
nmap <Leader>h :set list!<CR>

" Format a paragraph
nnoremap <leader>q gqip

" Easily toggle distraction free - Goyo
nnoremap <F11> :Goyo<Cr>

nnoremap nw :set wrap!<CR>

" Easily delete buffers
nnoremap <leader>c :ls<Cr>:bd 

" Junegunn Easy-align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign):w
" }}}2
" My Plugins {{{2
" --- DayNight NONE
" --- Scheduling
nnoremap <leader>r :RotateScheduleWord<Cr>
nnoremap <leader>d :ScheduleDone<Cr>
" }}}2
" }}}
" PLUGINS / LANGUAGES {{{ 

" C/C++ {{{2
augroup filetype_c
    autocmd!
    autocmd FileType c       set foldmethod=syntax
    autocmd FileType cpo     set foldmethod=syntax
    autocmd FileType arduino set foldmethod=syntax
augroup END
" }}}2
" Python {{{2
" ALE - Asynchronous linting
let g:ale_python_mypy_options = '--ignore-missing-imports'
let g:ale_sign_error='✗'
let g:ale_sign_warning='∎'

let g:ale_fixers = {
            \'python': ['add_blank_lines_for_python_control_statements',
                       \'autopep8',
                       \'isort'],
\}
let g:ale_fix_on_save = 1
let g:ale_sign_column_always=1

augroup filetype_py
    autocmd!
    autocmd FileType python  set foldmethod=indent
    autocmd FileType python  set tabstop=4
    autocmd FileType python  set softtabstop=4
    autocmd BufWritePre *.py :%s/\s\+$//e
augroup END

let g:pymode_python = 'python3'

" Vim-slime - tmux & python
let g:slime_target = "tmux"
let g:slime_python_ipython = 1

" }}}2
" JSON {{{2
augroup filetype_json
    autocmd!
    autocmd FileType json    set tabstop=2
    autocmd FileType json    set softtabstop=2
    autocmd FileType json    set shiftwidth=2
augroup END
" }}}2
" Go {{{2
augroup filetype_go
    autocmd!
    autocmd FileType go      set nofen
    autocmd FileType go      set foldmethod=syntax
augroup END

let g:go_fmt_command = "goimports"
" }}}2
" Markdown {{{2
augroup markdown
    autocmd!
    autocmd Filetype markdown setlocal conceallevel=2
    autocmd Filetype markdown setlocal breakindentopt=shift:4,sbr
    autocmd Filetype markdown setlocal nonumber
    autocmd Filetype markdown hi Conceal cterm=NONE ctermbg=NONE
    autocmd Filetype markdown hi Conceal guibg=NONE guifg=NONE
    autocmd Filetype markdown nnoremap <leader>t :Toc<CR>
    autocmd BufEnter *.md setlocal foldexpr=MarkdownLevel()
    autocmd BufEnter *.md setlocal foldmethod=expr
    autocmd BufWritePre *.md :%s/\s\+$//e
augroup END

let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_follow_anchor = 1
" }}}2
" Miscellany {{{2
augroup filetype_miscellany
    autocmd!
    autocmd FileType make    set noexpandtab
    autocmd FileType rust    set foldmethod=syntax
    autocmd FileType vim     set foldmethod=marker
    autocmd BufEnter * hi vimOper cterm=NONE ctermbg=NONE
    autocmd BufEnter * hi vimOper guibg=NONE guifg=NONE
    autocmd BufEnter * hi! link SignColumn LineNr
augroup END
" }}}2
" Search (FZF / CtrlP / Ag) {{{2
" Use `rg` if available, fallback to `ag`
let g:ctrlp_use_caching = 0
if !s:haswin
    if executable('rg')
      set grepprg=rg\ --vimgrep
      let g:ctrlp_user_command = 'rg %s --files --color=never --glob "!.git/*"'

      " --column: Show column number
      " --line-number: Show line number
      " --no-heading: Do not show file headings in results
      " --fixed-strings: Search term as a literal string
      " --ignore-case: Case insensitive search
      " --no-ignore: Do not respect .gitignore, etc...
      " --hidden: Search hidden files and folders
      " --follow: Follow symlinks
      " --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
      " --color: Search color options

      command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)


      nnoremap <Leader>g :Find<SPACE>
      nnoremap <leader>F :Find<SPACE>
    elseif executable('ag')
      " Use ag over grep
      set grepprg=ag\ --nogroup\ --nocolor
      let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  endif
else
    let g:ctrlp_use_caching = 1
    let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files --oc --exclude-standard']
endif


" }}}2
" Latex / Vimtex {{{2
augroup filetype_latex
    autocmd BufNewFile,BufReadPost *.tex set filetype=tex
augroup END
let g:vimtex_quickfix_ignore_all_warnings=1
let g:vimtex_latexmk_continuous=0
let g:vimtex_quickfix_mode=0
let g:tex_flavor = "latex"
let g:vimtex_indent_enabled=1
let g:vimtex_fold_enabled=1
" }}}2
" Tables {{{2
let g:table_mode_corner="|"
let g:table_mode_corner_corner="|"
let g:table_mode_header_fillchar="-"
" }}}2
" UltiSnips {{{2
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpForwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"
" }}}2
" Goyo {{{2
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
let g:goyo_width=100
" }}}2
" EXTRA {{{2
let b:javascript_fold=1
let g:SuperTabDefaultCompletionType = "context"
" }}}2
" }}}
" FUNCTIONS {{{ 

" Custom fold {{{2
function! ToggleFold()
    if &foldlevel < 10
        set foldlevel=99
    else
        set foldlevel=0
    endif
endfunction

function! CustomFoldText()
     "get first non-blank line
     let fs = v:foldstart
     while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
     endwhile
     if fs > v:foldend
         let line = getline(v:foldstart)
     else
         let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
     endif

     let w = winwidth(0) - &foldcolumn - (&number ? 6 : 0)
     let foldSize = 1 + v:foldend - v:foldstart
     let foldSizeStr = " {" . foldSize . "} "
     let foldLevelStr = repeat("<", v:foldlevel)
     let lineCount = line("$")
     let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr))
     return line . expansionString . foldSizeStr . foldLevelStr
endfunction
set foldnestmax=99
set foldtext=CustomFoldText()
noremap zt :call ToggleFold()<CR>
" }}}2
" Open snippets for this filetype {{{2
function! OpenScopesSnippets()
    let ft = &filetype
    let dr = expand('~/.vim/snippets/')
    let fn = dr . ft . '.snippets'
    execute "e " . fn
endfunction
nnoremap <leader>os mZ:call OpenScopesSnippets()<Cr>
" }}}2
" Markdown level, for folding {{{2
" Function for markdown folding 
function! MarkdownLevel()
    let h = matchstr(getline(v:lnum), '^#\+')
    if empty(h)
        return "="
    endif
    return ">" . len(h)
endfunction
" }}}2
" Pandoc Markdown reformatting {{{2
function! RunPandoc(extra, wrap, atx, reflink)
    silent !clear
    let format='markdown_github-hard_line_breaks+line_blocks+tex_math_dollars'
    let format = format . '+yaml_metadata_block-shortcut_reference_links'
    let cmd = 'pandoc % -o % -t ' . format . ' ' . a:extra
    if a:reflink
        let cmd = cmd . ' --reference-links'
    endif
    if a:atx
        let cmd = cmd . ' --atx-headers'
    endif
    if a:wrap
        let cmd = cmd . ' --columns=80'
    else
        let cmd = cmd . ' --wrap=none'
    endif
    execute "!" . cmd
endfunction
command! MDTidy call RunPandoc('', 0, 1, 0)
command! MDTidyRef call RunPandoc('', 0, 1, 1)
command! MDTidyWrap call RunPandoc('', 1, 1, 0)
command! MDTidyWrapRef call RunPandoc('', 1, 1, 1)
nnoremap <silent> <leader>mdt :MDTidyRef<CR>

" Convert current markdown file to PDF 
function! MDToPDF()
    silent !clear
    let outfn=expand('%:r') . '.pdf'
    let cmd = 'pandoc % -o ' . outfn
    execute "!" . cmd
endfunction
command! MDToPDF call MDToPDF()
" }}}2
" Custom commands {{{2
command! CopyFilename let @+=expand("%")
command! Wd write|bdelete
" }}}2
" }}}
" Platform specific {{{ 

if s:haswin
    nnoremap <F10> :WToggleFullscreen<CR>
    autocmd GUIEnter * silent! WToggleClean
    let gitgutter_enabled=0
    cd ~\src\github.com\chrisdavison
endif

if s:darwin && has('gui')
    set macligatures
endif
" }}}
" EXPERIMENTAL {{{ 

augroup autoSaveAndRead
    autocmd!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall
    autocmd CursorHold * silent! checktime
augroup END

let g:netrw_list_hide = "*.swp,*.swo,*.aux"

autocmd VimResized * wincmd= " equally resize splits on window resize

if has('persistent_undo')
    set undodir=~/.undodir/
    set undofile
endif
" }}}
