" vim: set foldmethod=marker foldlevel=1:
" ChrisDavison's Vimrc
" SETTINGS {{{
" --- Leader at the top to be obvious and easy to modify
let mapleader="\\"
" Command abbreviations

" --- Helper variables for environment, should they be needed elsewhere
let s:haswin = has('win32') || has('win64')
let s:darwin = has('mac')
let s:has_256co=$TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
let s:prefer_fzf=1
let s:hasripgrep=executable('rg')
let s:neovim=has('nvim')

" --- Some useful settings that need documented
set nocompatible " Don't force compability with vi
set autochdir    " cd to the directory of the currently edited file
syntax on
filetype plugin indent on
set encoding=utf-8
scriptencoding utf-8
set showcmd " SHow a currently active command in the bottom line of vim
set wrap lbr
let &showbreak = '‚îî '
set breakindent " Indent after soft-breaking a line
set omnifunc=syntaxcomplete#Complete
set number " Line numbers
set iskeyword=a-z,A-Z,_,.,39
set hidden
set viminfo='10,<50,s10,%,h,n~/.viminfo
set nospell
set shell=/bin/zsh
set foldenable " Don't fold by default
set foldlevelstart=1
set foldnestmax=10
set foldtext=CustomFoldText2() " Use a custom fold command below for fold text
set listchars=tab:‚ñ∏\ ,trail:¬∑,extends:‚ùØ,precedes:‚ùÆ,nbsp:√ó,eol:¬¨
set autoread " Automatically update buffer if file changed externally
set updatetime=1000 " Write a swap file after 1 second
set cmdheight=2  " Useful for more info on some plugins

" --- Search options
set incsearch " Search as you type
set gdefault " By default, replace all matches on a line (i.e. always s///g)
set hlsearch " Highlight search results
set ignorecase
set smartcase
set magic
set backspace=indent,eol,start

" --- Various coding preferences
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab " Convert tabs to spaces
set clipboard=unnamed " Use system clipboard with vim clipboard
set lazyredraw " Don't redraw _while_ exeecuting macros
set laststatus=2
set nrformats=
set title
set sidescrolloff=15
set sidescroll=1

" --- Put all temp files in one place
set backup
set backupcopy=yes
set backupdir=~/.backup,.
set directory=~/.temp,.

" --- Wildmenu config
set wildmenu
set wildmode=list:longest,full

"""" Ignore certain files and directories in Wildmenu
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

set splitbelow
set splitright

function! FugitiveStatusCD()
let fs=fugitive#statusline()
if fs != ''
    return fs . ","
else
    return ""
fi
endfunction

" --- Statusbar
set statusline=%<\ %t\ %=%(%l/%L\|%c%),\ %{exists('g:loaded_fugitive')?FugitiveStatusCD():''}\ %Y\ 

" --- Miscellany
let g:netrw_list_hide = "*.swp,*.swo,*.aux"
if has('persistent_undo')
set undodir=~/.undodir/
set undofile
endif
set t_ut= " Fix issues with background color on some terminals
" }}}
" PLUGIN INSTALL {{{
call plug#begin('~/.vim/plugged')

Plug 'fatih/vim-go'                               " Syntax: Go
Plug 'pangloss/vim-javascript'                    " Syntax: Javascript
Plug 'airblade/vim-gitgutter'
Plug 'racer-rust/vim-racer'                       " Support for Rust & Racer
Plug 'godlygeek/tabular'                          " Support for formatting tables
Plug 'plasticboy/vim-markdown'                    " Syntax: Markdown
Plug 'rbonvall/snipmate-snippets-bib'             " Snippets for bibtex files
Plug 'ekalinin/Dockerfile.vim'                    " Syntax: Docker
Plug 'leafgarland/typescript-vim'                 " Language: Typescript
Plug 'udalov/kotlin-vim'                          " Language: Kotlin
Plug 'jalvesaq/Nvim-R'                            " Language: R
Plug 'shime/vim-livedown'                         " Markdown preview
Plug 'ChrisDavison/daynight.vim'                  " Toggle between dark and light themes
Plug 'francoiscabrol/ranger.vim'
if s:neovim
Plug 'rbgrouleff/bclose.vim'
endif
Plug 'ChrisDavison/scheduling.vim'                " Org-mode like TODO/WIP/DONE rotation
Plug 'ChrisDavison/daynight.vim'                
Plug 'ChrisDavison/yankmatching.vim'                
Plug 'Konfekt/FastFold'                           " Refreshing folds only on save, or fold-usage
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'bps/vim-textobj-python'                     " Text objects for python
Plug 'dahu/vim-fanfingtastic'                     " Make 'F' work across newlines
Plug 'dhruvasagar/vim-table-mode'
Plug 'easymotion/vim-easymotion'                  " Easily navigate to any character on screen
Plug 'ervandew/supertab'
Plug 'garbas/vim-snipmate'
Plug 'guns/vim-sexp'
Plug 'honza/vim-snippets'
Plug 'jpalardy/vim-slime'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'                          " Distraction free mode
Plug 'junegunn/limelight.vim'                     " Typewriter mode for distraction free
Plug 'junegunn/rainbow_parentheses.vim'           " Different colours for each paren pair
Plug 'junegunn/vim-easy-align'
Plug 'kana/vim-textobj-user'                      " Custom text objects ('verbs')
Plug 'kkoenig/wimproved.vim'
Plug 'lervag/vimtex'                              " Syntax: Latex
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'mattn/webapi-vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'mxw/vim-jsx'                                " JSX syntax support
Plug 'nvie/vim-flake8'                            " Lint with flake8
Plug 'Shougo/echodoc.vim'
Plug 'paulhybryant/vim-textobj-path'              " Text object for paths
Plug 'rking/ag.vim'                               " Support for TheSilverSearcher
Plug 'terryma/vim-expand-region'                  " Keybind to expand the scope of your selection
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-fugitive'                         " Better git integration with vim
Plug 'tpope/vim-obsession'                        " Better session management with vim
Plug 'tpope/vim-sensible'                         " Sensible defaults
Plug 'tpope/vim-sexp-mappings-for-regular-people' " Better Sexp mappings
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-scripts/a.vim'
Plug 'vim-scripts/utl.vim'
Plug 'wellle/targets.vim'
Plug 'freitass/todo.txt-vim'
Plug 'w0rp/ale'
Plug 'gmoe/vim-espresso'
Plug 'BurningEther/iron.nvim'

call plug#end()

" }}}
" APPEARANCE {{{
if has('gui_running')
    set encoding=utf-8
    set guifont=InputMono\ ExLight:h24,monofur:h24,Fira_Code:h22,Input:h18,Input_Mono:h18,Fira_Code:h18

    " Disable menu bollocks
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=R
    set guioptions-=L
    set guioptions-=l
else
    if s:has_256co
       set t_Co=256
    else
       colorscheme default
       set t_Co=8
       set t_Sf=[3%dm
       set t_Sb=[4%dm
    endif
endif

" Variables for theme switching using my custom plugin daynight.vim
set bg=dark
let g:themeswitch_day='github'
let g:themeswitch_night='espresso'
if has('gui')
    let g:themeswitch_day='github'
    let g:themeswitch_night='espresso'
endif
execute 'colorscheme ' . g:themeswitch_night
hi! link SignColumn LineNr
" }}}
" ABBREVIATIONS {{{
" Command abbreviations
cnoreabbrev E e
cnoreabbrev W w
cnoreabbrev WQ wq
cnoreabbrev Q q
cnoreabbrev QA qa
cnoreabbrev Qa qa
cnoreabbrev Bd bd

" Shortcuts for utility inputs
iabbrev @@ c.jr.davison@gmail.com
iabbrev TD **TODO**
iabbrev EX **EXAMPLE:**
iabbrev E: Explain:
iabbrev ACT **ACTION:**
iabbrev ASM *Assume* ::
iabbrev invq ¬ø
iabbrev *@ **email:**
iabbrev EXP **experiment:**
iabbrev HT `#`<left>
iabbrev dbg **DEBUG**

" Economics-specific abbreviations
iabbrev gnss goods and services
iabbrev gns good and service
iabbrev eqb equilibrium
iabbrev govt government

" HTML codes
iabbrev ndash ‚Äì
iabbrev mdash ‚Äî

" Unicode symbols
iabbrev rarr ‚Üí
iabbrev larr ‚Üê
iabbrev lrarr ‚áî
iabbrev implarr ‚áí
iabbrev forall ‚àÄ
iabbrev pardif ‚àÇ
iabbrev thereexists ‚àÉ
iabbrev notexists ‚àÑ
iabbrev memberof ‚àà
iabbrev notmemberof ‚àâ
iabbrev endproof ‚àé
iabbrev summ ‚àë
iabbrev prodd ‚àè
iabbrev isequal ‚â°
iabbrev logicint ‚ãÇ
iabbrev logicand ‚àß
iabbrev logicor ‚à®
iabbrev logicnot ¬¨
iabbrev approxx ‚âà
iabbrev there4 ‚à¥
" }}}
" KEYBINDS - Navigation {{{
" Move splits/windows
map <C-w><C-h> <C-w><S-h>
map <C-w><C-j> <C-w><S-j>
map <C-w><C-k> <C-w><S-k>
map <C-w><C-l> <C-w><S-l>

" Move by VISUAL lines
nnoremap  <buffer> <silent> <C-k> gk
nnoremap  <buffer> <silent> <C-j> gj
nnoremap  <buffer> <silent> 0 g0
nnoremap  <buffer> <silent> <C-$> g$
vmap  <buffer> <silent> k gk
vmap  <buffer> <silent> j gj
vmap  <buffer> <silent> 0 g0
vmap  <buffer> <silent> $ g$

" Select what was pasted
noremap gV `[v`]

" Buffer/File/Function/Outline navigation
if s:prefer_fzf && !has('gui_running')
    nnoremap <leader>b :Buffers<Cr>
    nnoremap <leader>p :Files<Cr>
    nnoremap <leader>ll :Lines<cr>
    nnoremap <leader>lb :BLines<cr>
    nnoremap <leader>m :Marks<cr>
endif

" Modify/source my VIMRC
nnoremap <leader>ev :e $MYVIMRC<Cr>G
nnoremap <leader>sv :so $MYVIMRC<Cr>

" Backspace goes to `alternate` file
nnoremap <BS> <C-^>

" }}}
" KEYBIND - Miscellaneous {{{
nmap S :%s///<LEFT>
vnoremap S :s///<LEFT>
nnoremap <silent> <leader>/ :nohlsearch<CR>

" Indent/De-dent visual selection
vnoremap < <gv
vnoremap > >gv

nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader>lt :LivedownToggle<cr>
nnoremap <Leader>h :set list!<CR>
nnoremap <F11> :Goyo<Cr>
nnoremap nw :set wrap!<CR>
nnoremap <leader>c :ls<Cr>:bd
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign):w
nnoremap <leader>r :RotateScheduleWord<Cr>
nnoremap <leader>d :ScheduleDone<Cr>
" }}}
" PLUGINS / LANGUAGES {{{
augroup vimrc
    autocmd!
    autocmd FileType c set foldmethod=syntax
    autocmd FileType cpo set foldmethod=syntax
    autocmd FileType arduino set foldmethod=syntax
    autocmd FileType python  set nofen
    autocmd FileType python  set foldmethod=indent
    autocmd FileType python  set tabstop=4
    autocmd FileType python  set softtabstop=4
    autocmd FileType json    set tabstop=2
    autocmd FileType json    set softtabstop=2
    autocmd FileType json    set shiftwidth=2
    autocmd FileType go      set nofen
    autocmd FileType go      set foldmethod=syntax
    autocmd Filetype markdown setlocal conceallevel=2
    autocmd Filetype markdown setlocal breakindentopt=shift:4,sbr
    autocmd Filetype markdown setlocal nonumber
    autocmd Filetype markdown setlocal foldlevelstart=1
    autocmd Filetype markdown setlocal foldexpr=MarkdownLevel()
    autocmd Filetype markdown setlocal foldmethod=expr
    autocmd Filetype markdown hi Conceal cterm=NONE ctermbg=NONE
    autocmd Filetype markdown hi Conceal guibg=NONE guifg=NONE
    autocmd Filetype markdown nnoremap <leader>t :Toc<CR>
    autocmd BufWritePre *.md,*.py :%s/\s\+$//e
    autocmd BufWritePre *.md,*.py :%s///e
    autocmd FileType make    set noexpandtab
    autocmd FileType rust    set foldmethod=syntax
    autocmd FileType rust nmap gd <Plug>(rust-def)
    autocmd FileType rust nmap gs <Plug>(rust-def-split)
    autocmd FileType rust nmap gx <Plug>(rust-def-vertical)
    autocmd FileType rust nmap <leader>gd <Plug>(rust-doc)
    autocmd FileType vim     set foldmethod=marker
    " autocmd BufEnter * hi vimOper cterm=NONE ctermbg=NONE
    " autocmd BufEnter * hi vimOper guibg=NONE guifg=NONE
    autocmd ColorScheme * hi! link SignColumn LineNr
    autocmd FileType javascript set filetype=javascript.jsx
    autocmd FileType javascript,javascript.jsx set foldmethod=syntax
    autocmd BufNewFile,BufReadPost *.tex set filetype=tex
    autocmd User GoyoEnter Limelight
    autocmd User GoyoLeave Limelight!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall " Write files on focus lost
    autocmd CursorHold * silent! checktime " Check for external changes to files
    autocmd VimResized * wincmd= " equally resize splits on window resize
augroup END
" }}}2
" ALE - Async lint engine
let g:ale_sign_error='‚úó'
let g:ale_sign_warning='‚àé'
let g:ale_fix_on_save = 1
let g:ale_sign_column_always=1
hi clear ALEErrorSign
hi clear ALEWarningSign
" PYTHON
let g:ale_python_mypy_options = '--ignore-missing-imports'
let g:pymode_python = 'python3'
let g:slime_target = "tmux"
let g:slime_python_ipython = 1
" GO
let g:go_fmt_command = "goimports"
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_follow_anchor = 1
" LATEX
let g:tex_flavor = "latex"
let g:vimtex_quickfix_ignore_all_warnings=1
let g:vimtex_latexmk_continuous=0
let g:vimtex_quickfix_mode=0
let g:vimtex_indent_enabled=1
let g:vimtex_fold_enabled=1
" TABLES
let g:table_mode_corner="|"
let g:table_mode_corner_corner="|"
let g:table_mode_header_fillchar="-"
" ULTISNIPS
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpForwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"
" GOYO
let g:goyo_width=100
" EXTRA
let b:javascript_fold=1
let g:SuperTabDefaultCompletionType = "context"
" RUST
let g:racer_cmd="/Users/davison/.cargo/bin/racer"
let g:racer_experimental_completer=1
let g:echodoc_enable_at_startup=1
" GITGUTTER
let g:gitgutter_sign_added = '‚àô'
let g:gitgutter_sign_modified = '‚àô'
let g:gitgutter_sign_removed = '‚àô'
let g:gitgutter_sign_modified_removed = '‚àô'
" }}}
" FZF && Rg/Ag {{{
" Use `rg` if available, fallback to `ag`
if s:hasripgrep
    set grepprg=rg\ --vimgrep
    " let s:find_cmd=
    command! -bang -nargs=* Find call fzf#vim#grep(
    \    'rg --column  --no-heading -F --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)
    nnoremap <leader>F :Find<SPACE>
endif
" }}}
" FUNC - folding {{{
noremap <space> :normal zA<CR>

function! CustomFoldText()
     "get first non-blank line
     let fs = v:foldstart
     while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
     endwhile
     if fs > v:foldend
         let line = getline(v:foldstart)
     else
         let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
     endif

     let w = winwidth(0) - &foldcolumn - (&number ? 6 : 0)
     let foldSize = 1 + v:foldend - v:foldstart
     let foldSizeStr = "| " . foldSize . " (" . v:foldlevel . ")"
     let lineCount = line("$")
     let expansionString = repeat(".", w - strwidth(foldSizeStr.line))
     return line . expansionString . foldSizeStr
endfunction

function! CustomFoldText2()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '‚Ä¶' . repeat(" ",fillcharcount) . foldedlinecount . ' '
endfunction

" Get the number of # in header to determine foldlevel for markdown
function! MarkdownLevel()
    let h = matchstr(getline(v:lnum), '^#\+')
    if empty(h)
        return "="
    endif
    return ">" . len(h)
endfunction
" }}}
" FUNC - Pandoc Markdown reformatting {{{
function! RunPandoc(extra, wrap, atx, reflink)
    silent !clear
    let format='markdown_github-hard_line_breaks+line_blocks+tex_math_dollars'
    let format = format . '+yaml_metadata_block-shortcut_reference_links'
    let cmd = 'pandoc % -o % -t ' . format . ' ' . a:extra
    if a:reflink
        let cmd = cmd . ' --reference-links'
    endif
    if a:atx
        let cmd = cmd . ' --atx-headers'
    endif
    if a:wrap
        let cmd = cmd . ' --columns=80'
    else
        let cmd = cmd . ' --wrap=none'
    endif
    execute "!" . cmd
endfunction
command! MDTidy call RunPandoc('', 0, 1, 0)
command! MDTidyRef call RunPandoc('', 0, 1, 1)
command! MDTidyWrap call RunPandoc('', 1, 1, 0)
command! MDTidyWrapRef call RunPandoc('', 1, 1, 1)
nnoremap <silent> <leader>mdt :MDTidyRef<CR>

" Convert current markdown file to PDF
function! MDToPDF()
    silent !clear
    let outfn=expand('%:r') . '.pdf'
    let cmd = 'pandoc % -o ' . outfn
    execute "!" . cmd
endfunction
command! MDToPDF call MDToPDF() | :echo "File converted to pdf"
"
" Convert current markdown file to PDF
function! MDToEpub(level)
    silent !clear
    let outfn=expand('%:r') . '.epub'
    let cmd = 'pandoc % --epub-chapter-level=' . a:level . ' -s --standalone -o ' . outfn
    execute "!" . cmd
endfunction
command! MDToEpub call MDToEpub(2) | :echo "File converted to epub"
command! MDToEpub1 call MDToEpub(1) | :echo "File converted to epub"

" }}}
" FUNC - Miscellaneous {{{
function! CopyFilename(relative)
    if a:relative
        let s:fn="./" . expand("%")
    else
        let s:fn=expand("%:p")
    endif
    let @+=s:fn
    echo "Copied path: " . s:fn
endfunction
command! CopyFilename call CopyFilename(0)
command! CopyRelativeFilename call CopyFilename(1)
command! Wd write|bdelete
" }}}
" FUNC - Insert date/timestamp at point {{{
function! InsertDateAtPoint()
    read!date "+\%Y-\%m-\%d"
    normal kJ
endfunction

function! InsertNamedDateAtPoint()
    read!date "+\%Y-\%m-\%d - \%a"
    normal kJ
endfunction

function! InsertTimestampAtPoint()
    read!date "+\%Y-\%m-\%d \%H:\%M:\%S"
    normal kJ
endfunction
function! InsertTimeAtPoint()
    read!date "+\%H:\%M"
    normal kJ
endfunction
command! Today call InsertDateAtPoint()
command! TodayNamed call InsertNamedDateAtPoint()
command! TimeNow call InsertTimestampAtPoint()
command! TimeShort call InsertTimeAtPoint()
" }}}
" FUNC - Insert logbook template {{{
function! InsertLogbookHeader()
    normal i# 
    read!date "+\%Y-\%m-\%d - \%a"
    normal kJ
    normal o
    normal o-   **today**: 
endfunction
command! Logbook call InsertLogbookHeader()
" }}}
" FUNC - NOTETAKING {{{
let g:notedir=$HOME . "/Dropbox/n/notes/"

function! OpenCapture()
    execute "e " .  g:notedir . "capture.txt"
endfunction
command! Capture :call OpenCapture()
nnoremap <leader>cap :call OpenCapture()<CR>

function! OpenTodo()
    execute "e " .  g:notedir . "todo.txt"
endfunction
command! Todo :call OpenTodo()
nnoremap <leader>td :call OpenTodo()<CR>

function! CopyToTodo()
    normal! yy 
    normal! mA
    call OpenTodo()
    normal! Gp
    normal! `A
endfunction
command! CopyToTodo :call CopyToTodo()
nnoremap <leader>ctt :call CopyToTodo()<CR>
" }}}
" PLATFORM - Windows {{{
if s:haswin
    set shell=cmd.exe
    set shellcmdflag=/c
    set guifont=Fantasque_Sans_Mono:h16
    let gitgutter_enabled=0
    let g:racer_cmd="c:\\Users\\user01\\.cargo\\bin\\racer.exe"
    let g:notedir="e:\\Dropbox\\n\\notes\\"
    cd ~\working
endif
" }}}
" PLATFORM - Mac {{{
if s:darwin && has('gui')
set macligatures
endif
" }}}
" EXPERIMENTAL {{{
command! Bpd bp|bd # | :echo "Buffer deleted and showing previous"
command! TEOL %s/\s\+$//e | :echo "EOL cleaned"
command! CLEAN retab | TEOL | :echo "Retabbed and EOL cleaned"
nnoremap ]l :ALENextWrap<CR>
nnoremap [l :ALEPreviousWrap<CR>

let g:ranger_map_keys=0
if s:neovim
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
endif

function! GetSyntaxScope()
let hi="hi<" . synIDattr(synID(line("."),col("."),1),"name") . '>'
let trans="trans<" . synIDattr(synID(line("."),col("."),0),"name") . ">"
let lo="lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
echo hi . " " . trans . " " . lo
endfunction
command! CurrentSyntax call GetSyntaxScope()

chdir ~/working/notes
command! -bar -nargs=1 -complete=file E :exe "edit ".substitute(<q-args>,'\(.*\):\(\d\+\):\=$','+\2 \1','')
command! -bar -nargs=? -bang Scratch :silent enew<bang>|set buftype=nofile bufhidden=hide noswapfile buflisted filetype=<args> modifiable
command! -bar -nargs=? -bang SScratch :silent new<bang>|set buftype=nofile bufhidden=hide noswapfile buflisted filetype=<args> modifiable
nnoremap <silent>  == :Scratch<CR>
nnoremap <silent>  =" :Scratch<Bar>put<Bar>1delete _<Bar>filetype detect<CR>
nnoremap <silent>  =* :Scratch<Bar>put *<Bar>1delete _<Bar>filetype detect<CR>
nnoremap <silent>  =p :SScratch<Bar>put *<Bar>1delete _<Bar>filetype detect<CR>
nnoremap           =f :Scratch<Bar>setfiletype<Space>

inoremap timehm<Tab> <C-R>=strftime("**%H:%M**")<CR><C-R>E

function! YankToScratch()
    let @a=""
    call inputsave()
    let tag=input('Enter regex to search: ')
    call inputrestore()
    exec ":g/".tag."/y A"
    new
    set buftype=nofile
    set bufhidden=hide
    set noswapfile
    set buflisted
    put A
    normal ggdj
endfunction
command! YankToScratch call YankToScratch()<CR>
" }}}
