#!/usr/bin/env python3
import datetime
import os
import re
import sys


USAGE = """    recur ITEM#...
      Mark each ITEM# as complete, and recreate following rec:X[dwm]
"""


rx_rec = re.compile(r"rec:(\d+)([dwm])")
rx_due = re.compile(r"due:(\d\d\d\d-\d\d-\d\d)")
rx_rec_word = re.compile(r"rec:(monday|tuesday|wednesday|thursday|friday|saturday|sunday|first|last)")

    
def shift_date(recur_string_match, cur_due_date):
    shift=datetime.timedelta(days=0)
    shiftnum = int(recur_string_match.group(1))
    freq=recur_string_match.group(2)
    after = cur_due_date
    if freq is 'd':
        after += datetime.timedelta(days=shiftnum)
    elif freq is 'w':
        after += datetime.timedelta(weeks=shiftnum)
    else:
        after = after.replace(month=after.month+1)
    return after


def recur_date_word(word, cur_due_date):
    word = word.lower()
    days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    if word in days:
        # Walk forward a day at a time until we reach the appropriate weekday
        next_date = cur_due_date
        while True:
            if next_date.weekday() == days.index(word) and cur_due_date != next_date:
                break
            next_date += datetime.timedelta(days=1)
        return next_date
    elif word == 'first':
        # Jump forward 1 month from the current due date, and take the first
        # day of that month
        return cur_due_date.replace(day=1, month=cur_due_date.month+1)
    elif word == 'last':
        # From the current due date, jump forward 2 months, then back 1 day, 
        # to get the end of the NEXT month
        next_date = cur_due_date.replace(day=1, month=cur_due_date.month+2)
        return next_date - datetime.timedelta(days=1)


def recur_task(task):
    today = datetime.date.today()
    done_task = "x {} {}".format(today, task)

    match_rec = rx_rec.search(task)
    match_rec_word = rx_rec_word.search(task)
    m_due = rx_due.search(task)
    # Extract due date
    cur_due_date = None
    if m_due:
        p0, p1 = m_due.span()
        cur_due_date = datetime.datetime.strptime(task[p0+4:p1], "%Y-%m-%d").date()
        task = task[:p0] + ' ' + task[p1:]
    # Extract rec word and calc next due date
    if match_rec:
        next_date = shift_date(match_rec, cur_due_date)
    elif match_rec_word:
        next_date = recur_date_word(match_rec_word.group(1), cur_due_date)
    else:
        next_date = datetime.date.today() + timedelta(days=1)
    # Generate new task name
    new_task = '{}due:{}'.format(task, next_date)
    return done_task, new_task


args = sys.argv[1:]
if args[0] == "usage":
    print(USAGE)
    sys.exit(0)
items = [int(a) for a in args[1:]]
todos_to_print = []
todos_to_append = []
todofile = os.environ["TODO_FILE"]
todos = open(todofile, 'r').read().splitlines()
for i, t in enumerate(todos):
    if not t:
        continue
    if i+1 in items:
        done, new = recur_task(t)
        print("DONE: {} {}".format(i+1, t))
        print("ADDED:", new)
        todos_to_print.append(done)
        todos_to_append.append(new)
    else:
        todos_to_print.append(t)
todos_to_print.extend(todos_to_append)
todos_out = '\n'.join(todos_to_print)
with open(todofile, 'w') as todo_file:
    print(todos_out, file=todo_file) 
