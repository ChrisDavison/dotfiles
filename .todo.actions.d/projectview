#!/usr/bin/env python3
import os
import re
import sys
import string
from datetime import date
from collections import defaultdict


tasks = []
project_to_task_index = defaultdict(list)
priority_colours = dict()
project_colour = os.environ.get("COLOR_PROJECT", "").replace('\\\\033', '\033')
context_colour = os.environ.get("COLOR_CONTEXT", "").replace('\\\\033', '\033')
clear_colour = os.environ.get("DEFAULT", "").replace('\\\\033', '\033')
done_colour = os.environ.get("COLOR_DONE", "").replace('\\\\033', '\033')


def format_line(line):
    if line[0] == 'x':
        return done_colour + line + clear_colour
    priority = 'NONE'
    if line[0] == '(' and line[1] in string.ascii_uppercase and line[2] == ')':
        priority = line[1]
    pri_colour = priority_colours[priority]
    line = pri_colour + line
    projects = { w for w in line.split(' ') if w.startswith('+') }
    contexts = { w for w in line.split(' ') if w.startswith('@') }
    for word in projects:
        line = line.replace(word, project_colour+word+clear_colour)
    for word in contexts:
        line = line.replace(word, context_colour+word+clear_colour)
    return line + clear_colour


def matches_filter(line, filter):
    for word in filter:
        if word.startswith('-') and word[1:] in line:
            return False
        elif not word.startswith('-') and not word in line:
            return False
    return True


def order_priority_then_number(tasklist):
    re_pri = re.compile("(\([A-Z]\))")
    tasks_with_priority = []
    tasks_no_priority = []
    for i, line in tasklist:
        line = line.strip()
        pri = re_pri.search(line)
        if pri:
            tasks_with_priority.append((pri.group(1), i, line))
        else:
            tasks_no_priority.append((i, line))
    output = [(i, task) for _pri, i, task in sorted(tasks_with_priority, key=lambda x: x[0])]
    output.extend(tasks_no_priority)
    return output


def main(filter):
    # make sure you have all your args
    TODO_FILE = os.environ['TODO_FILE']
    for letter in string.ascii_uppercase:
        if "PRI_" + letter in os.environ:
            priority_colours[letter] = os.environ["PRI_" + letter].replace('\\\\033', '\033')
        else:
            priority_colours[letter] = ''
    priority_colours['NONE'] = ''

    for i, line in enumerate(open(TODO_FILE, "r")):
        line = line.strip()
        if not matches_filter(line, filter):
            tasks.append(line)
            continue
        projects_in_line = { w for w in line.split() if w.startswith('+') }
        if not projects_in_line:
            projects_in_line = ['None']
        tasks.append(format_line(line))
        for project in projects_in_line:
            project_to_task_index[project].append(i)
        
    no_project = project_to_task_index['None']
    del project_to_task_index['None']
    for project in sorted(project_to_task_index):
        print(project)
        tasks_for_project = [(i, tasks[i]) for i in project_to_task_index[project]]
        output = order_priority_then_number(tasks_for_project)
        for (i, task) in output:
        # for i in project_to_task_index[project]:
            tidytask = task.replace(project, "")
            print("  {:4d} {}".format(i+1, tidytask))
        print()

    if not no_project:
        return
    print("Tasks with no project")
    tasks_no_project = [(i, tasks[i]) for i in no_project]
    output = order_priority_then_number(tasks_no_project)
    for i, task in output:
        print("  {:4d} {}".format(i+1, task))


if __name__ == "__main__":
    if sys.argv[1] == "usage":
        print("    projectview [FILTER...]")
        print("      Show tasks grouped by project")
        print("      Optionally filter by tasks containing FILTER...")
        print()
    else:
        main(sys.argv[2:])
