#!/usr/bin/env python3
"""
due.py
Python 2/3 script for todo.txt add-on
Created by Rebecca Morgan 2017-03-10
Copyright (c) 2017 Rebecca Morgan. All rights reserved.

Edits by Steve Winslow 2017-06-25
Edits copyright (c) 2017 Steve Winslow. Licensed under MIT.
"""

from __future__ import print_function
from __future__ import division

import os
import sys
import math
from datetime import datetime, timedelta
from collections import defaultdict
import re


__USAGE__ = """    due [N]
      default behaviour generates a list tasks due today or overdue
      With argument N (integer), also show tasks due in next N days
"""



def task_print(task):
    match = re.search(r"\s\(([A-Z])\)\s", task[1])

    if match is None:
        print("{:4d} {}".format(task[0]+1, task[1]))
    else:
        pri = match.group(1)
        color = os.getenv("PRI_" + pri)

        if color is None:
            color = os.getenv("PRI_X")

        color = eval('u"' + color[1:] + '"')
        print("{:4d} {}".format(task[0]+1, color + task[1] + "\033[0m"))


def group_todos_by_delta_days(todos):
    rx_due = re.compile(r"(\([A-Z]\))?[A-Za-z0-9+@\s]+due:(\d{4}-\d{2}-\d{2})")
    tasks_with_date = list()
    tasks_by_delta = defaultdict(list)
    today = datetime.today().date()
    zero_pad = int(math.log10(len(todos))) + 1
    for i, task in enumerate(todos):
        if task.startswith('x '):
            continue
        m_due = rx_due.findall(task)
        if m_due:
            date = datetime.strptime(m_due[0][1], "%Y-%m-%d").date()
            diff = (date - today).days
            tasks_by_delta[diff].append((i, task.strip()))
    return tasks_by_delta


def matches_filter(filter, task):
    positives = [w[1:] for w in filter if w.startswith('+')]
    negatives = [w[1:] for w in filter if w.startswith('-')]
    if negatives:
        for neg in negatives:
            if neg in task:
                return False
    if not positives:
        return True
    for pos in positives:
        if pos not in task[1]:
            return False
    return True


def print_list(message, list_of_tasks, filter):
    print("====", message, "="*(73 - len(message)))
    num_displayed = 0
    for task in list_of_tasks:
        if not matches_filter(filter, task):
            continue
        task_print(task)
        num_displayed += 1
    print()
    return num_displayed



def main(future_days=None, filter=[]):
    todo_file = os.environ["TODO_FILE"]
    tasks_by_delta = dict()
    task_count = 0
    with open(todo_file, "r") as f:
        content = f.readlines()
        task_count = len(content)
        date = datetime.today()
        tasks_by_delta = group_todos_by_delta_days(content)
    sorted_delta_keys = sorted(tasks_by_delta.keys())

    num_displayed = 0

    overdue_tasks = [t for key in sorted_delta_keys if key < 0
                    for t in tasks_by_delta[key]]
    if overdue_tasks:
        num_displayed += print_list("Overdue tasks", overdue_tasks, filter)

    if 0 in sorted_delta_keys:
        num_displayed += print_list("Tasks due today", tasks_by_delta[0], filter)
   
    if future_days:
        future_tasks = [t for key in sorted_delta_keys if key > 0 and key <= future_days
                        for t in tasks_by_delta[key]]
        num_displayed += print_list("Tasks due in the next {} days".format(future_days), future_tasks, filter)

    print("TODO: {} of {} tasks shown".format(num_displayed, task_count))
           

if 'usage' in sys.argv:
    print(__USAGE__)
else:
    scriptname = os.path.basename(__file__)
    future_days = None
    filters = []
    for arg in sys.argv:
        if os.path.basename(arg) == scriptname:
            continue
        elif arg.startswith('+'):
            filters.append(arg)
        elif arg.startswith('-'):
            filters.append(arg)
        elif not future_days:
            future_days = int(arg)
        else:
            pass # excess args that aren't filters
    main(future_days, filters)

