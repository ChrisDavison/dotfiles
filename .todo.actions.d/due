#!/usr/bin/env python3
"""
due.py
Python 2/3 script for todo.txt add-on
Created by Rebecca Morgan 2017-03-10
Copyright (c) 2017 Rebecca Morgan. All rights reserved.

Edits by Steve Winslow 2017-06-25
Edits copyright (c) 2017 Steve Winslow. Licensed under MIT.
"""

from __future__ import print_function
from __future__ import division

import os
import re
import string
import sys
import math
from datetime import datetime, timedelta
from collections import defaultdict
import re


__USAGE__ = """    due [N]
      default behaviour generates a list tasks due today or overdue
      With argument N (integer), also show tasks due in next N days
"""
priority_colours = dict()
project_colour = os.environ.get("COLOR_PROJECT", "").replace('\\\\033', '\033')
context_colour = os.environ.get("COLOR_CONTEXT", "").replace('\\\\033', '\033')
clear_colour = os.environ.get("DEFAULT", "").replace('\\\\033', '\033')
done_colour = os.environ.get("COLOR_DONE", "").replace('\\\\033', '\033')


def format_line(line):
    if line[0] == 'x':
        return done_colour + line + clear_colour
    re_priority = re.compile(r"\(([A-Z])\)")
    m_pri = re_priority.search(line)
    priority = 'NONE'
    if m_pri:
        priority = m_pri.group(1)
    pri_colour = priority_colours[priority]
    line = pri_colour + line
    projects = { w for w in line.split(' ') if w.startswith('+') }
    contexts = { w for w in line.split(' ') if w.startswith('@') }
    for word in projects:
        line = line.replace(word, project_colour+word+clear_colour)
    for word in contexts:
        line = line.replace(word, context_colour+word+clear_colour)
    return line + clear_colour




def task_print(task):
    print("     {:4d}  {}".format(task[0] + 1, format_line(task[1])))
    # match = re.search(r"\s\(([A-Z])\)\s", task[1])


    # if match is None:
    #     print("    {:4d}  {}".format(task[0]+1, task[1]))
    # else:
    #     pri = match.group(1)
    #     color = os.getenv("PRI_" + pri)

    #     if color is None:
    #         color = os.getenv("PRI_X")

    #     color = eval('u"' + color[1:] + '"')
    #     print("    {:4d}  {}".format(task[0]+1, color + task[1] + "\033[0m"))


def group_todos_by_delta_days(todos):
    rx_due = re.compile(r"(\([A-Z]\))?[A-Za-z0-9+@\s]+due:(\d{4}-\d{2}-\d{2})")
    tasks_with_date = list()
    tasks_by_delta = defaultdict(list)
    today = datetime.today().date()
    zero_pad = int(math.log10(len(todos))) + 1
    for i, task in enumerate(todos):
        if task.startswith('x '):
            continue
        m_due = rx_due.findall(task)
        if m_due:
            date = datetime.strptime(m_due[0][1], "%Y-%m-%d").date()
            diff = (date - today).days
            tasks_by_delta[diff].append((i, task.strip()))
    return tasks_by_delta


def matches_filter(filter, task):
    positives = [w[1:] for w in filter if w.startswith('+')]
    negatives = [w[1:] for w in filter if w.startswith('-')]
    if negatives:
        for neg in negatives:
            if neg in task[1]:
                return False
    if not positives:
        return True
    for pos in positives:
        if pos not in task[1]:
            return False
    return True


def print_list(message, list_of_tasks, filter):
    header_printed = False
    num_displayed = 0
    for task in list_of_tasks:
        if not matches_filter(filter, task):
            continue
        if not header_printed:
            print(message, "." * 20)
            header_printed = True
        task_print(task)
        num_displayed += 1
    if num_displayed:
        print()
    return num_displayed



def main(future_days=None, filter=[]):
    todo_file = os.environ["TODO_FILE"]
    tasks_by_delta = dict()
    task_count = 0
    with open(todo_file, "r") as f:
        content = f.readlines()
        task_count = len(content)
        date = datetime.today()
        tasks_by_delta = group_todos_by_delta_days(content)
    sorted_delta_keys = sorted(tasks_by_delta.keys())

    num_displayed = 0

    overdue_tasks = [t for key in sorted_delta_keys if key < 0
                    for t in tasks_by_delta[key]]
    if overdue_tasks:
        num_displayed += print_list("OVERDUE", overdue_tasks, filter)

    if 0 in sorted_delta_keys:
        num_displayed += print_list("TODAY", tasks_by_delta[0], filter)
   
    if future_days:
        future_keys = [k for k in sorted_delta_keys if k > 0 and k <= future_days]
        for key in future_keys:
            num_displayed += print_list("due in {} days".format(key), tasks_by_delta[key], filter)

    print("TODO: {} of {} tasks shown".format(num_displayed, task_count))
           

if 'usage' in sys.argv:
    print(__USAGE__)
else:
    for letter in string.ascii_uppercase:
        PRI = "PRI_" + letter
        if PRI  in os.environ:
            priority_colours[letter] = os.environ[PRI].replace('\\\\033', '\033')
        else:
            priority_colours[letter] = ''
    priority_colours['NONE'] = ''

    scriptname = os.path.basename(__file__)
    future_days = None
    filters = []
    for arg in sys.argv:
        if os.path.basename(arg) == scriptname:
            continue
        elif arg.startswith('+'):
            filters.append(arg)
        elif arg.startswith('-'):
            filters.append(arg)
        elif not future_days:
            future_days = int(arg)
        else:
            pass # excess args that aren't filters
    main(future_days, filters)

