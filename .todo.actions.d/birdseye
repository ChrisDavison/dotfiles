#!/usr/bin/env python3
"""Get a report of all projects and contexts in todo.txt's format

This is a somewhat heavy refactoring of Gina Trapani's work 
(ginatrapani@gmail.com), basically to tidy the code and only focus
on the information I find interesting.

It was, as of 2016, licensed under GPL. Has been kept. 
"""
import os
import sys
import re
from datetime import date
from collections import defaultdict, Counter


LICENSE = "GPL"
UPDATED = "2020-03-22"
AUTHORS = [
    ("Chris Davison (c.jr.davison@gmail.com)", "Modified 2020-03-22"),
    ("Gina Trapani (ginatrapani@gmail.com)", "Original author, Copyright")
]

RX_PROJECT = re.compile('\+[a-zA-Z0-9]+')
RX_CONTEXT = re.compile('@[a-zA-Z0-9]+')


def projects_and_contexts_in_file(filename, with_completed=False):
    # We COULD just run the regex on the entire file, but by iterating over
    # lines we can handle the case where a project or context may be 
    # accidentally duplicated and only count it once.
    projects = Counter()
    contexts = Counter()

    for line in open(filename, "r"):
        if not with_completed and line.startswith('x '):
            continue
        projects.update(set(RX_PROJECT.findall(line)))
        contexts.update(set(RX_CONTEXT.findall(line)))
    return projects, contexts


def main():
    TODO_FILE = os.environ['TODO_FILE']
    DONE_FILE = os.environ['DONE_FILE']

    projects, contexts = projects_and_contexts_in_file(TODO_FILE, with_completed=False)
    projects_in_done, contexts_done = projects_and_contexts_in_file(DONE_FILE, with_completed=True)
    
    print("Projects & Contexts with OPEN todos -", date.today())
    print("")

    def header(msg):
        padding = "." * (40 - len(msg) - 5)
        return "... {} {}".format(msg, padding)

    if projects:
        print(header("projects"))
        for project, count_open in projects.items():
            count_closed = projects_in_done.get(project, 0)
            count_total = count_open + count_closed
            remaining = count_total - count_open
            pct = int(remaining / count_total * 100)
            print("    {} ({}/{} todos -- {}% done)".format(project, count_open, count_total, pct))
        print()

    if contexts:
        print(header("contexts"))
        for context, count_open in contexts.items():
            print("    {} ({} todos)".format(context, count_open))
        print()


if __name__ == "__main__":
    if sys.argv[1] == "usage":
        print("    birdseye")
        print("      report pending and completed tasks for projects and contexts")
        print()
    else:
        main()
