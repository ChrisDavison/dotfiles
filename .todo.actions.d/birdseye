#!/usr/bin/env python3
"""Get a report of all projects and contexts in todo.txt's format

This is a somewhat heavy refactoring of Gina Trapani's work 
(ginatrapani@gmail.com), basically to tidy the code and only focus
on the information I find interesting.

It was, as of 2016, licensed under GPL. Has been kept. 
"""
import os
import sys
from datetime import date
from collections import defaultdict, Counter


LICENSE = "GPL"
UPDATED = "2020-03-22"
AUTHORS = [
    ("Chris Davison (c.jr.davison@gmail.com)", "Modified 2020-03-22"),
    ("Gina Trapani (ginatrapani@gmail.com)", "Original author, Copyright")
]


def projects_and_contexts_in_file(filename, with_completed=False):
    # We COULD just run the regex on the entire file, but by iterating over
    # lines we can handle the case where a project or context may be 
    # accidentally duplicated and only count it once.
    projects = Counter()
    contexts = Counter()

    for line in open(filename, "r").read().splitlines():
        if not with_completed and line.startswith('x '):
            continue
        projects.update({w for w in line.split() if w.startswith('+')})
        contexts.update({w for w in line.split() if w.startswith('@')})
    return projects, contexts


def print_all(lst, lst_done, len_name):
    sorted_by_count = sorted(lst.items(), key=lambda x: x[1], reverse=True)
    for elem, count_open in sorted_by_count:
        count_closed = lst_done.get(elem, 0)
        count_total = count_open + count_closed
        remaining = count_total - count_open
        pct = int(remaining / count_total * 100)
        print("{:{len_longest}} {:3} / {}".format(elem, count_open, count_closed, len_longest=len_name))


def main():
    TODO_FILE = os.environ['TODO_FILE']
    DONE_FILE = os.environ['DONE_FILE']

    projects, contexts = projects_and_contexts_in_file(TODO_FILE, with_completed=False)
    projects_in_done, contexts_done = projects_and_contexts_in_file(DONE_FILE, with_completed=True)
    
    print("Projects & Contexts with OPEN todos")
    print(date.today())
    print("")

    len_longest = 0
    if projects or contexts:
        len_longest = max([len(p) for p in projects] + [len(c) for c in contexts])
        msg = "{:{len_longest}} {:3} / {}".format("", "OPEN", "DONE", len_longest=len_longest)
        print("{}".format(msg))
        print("{}".format('-'*len(msg)))

    need_divider = False
    if contexts:
        print_all(contexts, contexts_done, len_longest)
    if projects:
        if contexts:
            print('-'*len(msg))
        print_all(projects, projects_in_done, len_longest)


if __name__ == "__main__":
    if sys.argv[1] == "usage":
        print("    birdseye")
        print("      report pending and completed tasks for projects and contexts")
        print()
    else:
        main()
